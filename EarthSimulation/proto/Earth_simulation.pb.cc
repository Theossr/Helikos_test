// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Earth_simulation.proto

#include "Earth_simulation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace EarthSimulation {
constexpr EarthRequest_Nodes_Geo::EarthRequest_Nodes_Geo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lat_deg_(0)
  , lon_deg_(0)
  , alt_km_(0){}
struct EarthRequest_Nodes_GeoDefaultTypeInternal {
  constexpr EarthRequest_Nodes_GeoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EarthRequest_Nodes_GeoDefaultTypeInternal() {}
  union {
    EarthRequest_Nodes_Geo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EarthRequest_Nodes_GeoDefaultTypeInternal _EarthRequest_Nodes_Geo_default_instance_;
constexpr EarthRequest_Nodes::EarthRequest_Nodes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : geo_(nullptr)
  , t_rel_s_(0){}
struct EarthRequest_NodesDefaultTypeInternal {
  constexpr EarthRequest_NodesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EarthRequest_NodesDefaultTypeInternal() {}
  union {
    EarthRequest_Nodes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EarthRequest_NodesDefaultTypeInternal _EarthRequest_Nodes_default_instance_;
constexpr EarthRequest::EarthRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodes_(){}
struct EarthRequestDefaultTypeInternal {
  constexpr EarthRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EarthRequestDefaultTypeInternal() {}
  union {
    EarthRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EarthRequestDefaultTypeInternal _EarthRequest_default_instance_;
constexpr EarthResponse_Frame_Geo::EarthResponse_Frame_Geo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lat_deg_(0)
  , lon_deg_(0)
  , alt_km_(0){}
struct EarthResponse_Frame_GeoDefaultTypeInternal {
  constexpr EarthResponse_Frame_GeoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EarthResponse_Frame_GeoDefaultTypeInternal() {}
  union {
    EarthResponse_Frame_Geo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EarthResponse_Frame_GeoDefaultTypeInternal _EarthResponse_Frame_Geo_default_instance_;
constexpr EarthResponse_Frame_Mag::EarthResponse_Frame_Mag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_nt_(0)
  , y_nt_(0)
  , z_nt_(0)
  , f_nt_(0){}
struct EarthResponse_Frame_MagDefaultTypeInternal {
  constexpr EarthResponse_Frame_MagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EarthResponse_Frame_MagDefaultTypeInternal() {}
  union {
    EarthResponse_Frame_Mag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EarthResponse_Frame_MagDefaultTypeInternal _EarthResponse_Frame_Mag_default_instance_;
constexpr EarthResponse_Frame::EarthResponse_Frame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : geo_(nullptr)
  , mag_(nullptr)
  , t_rel_s_(0){}
struct EarthResponse_FrameDefaultTypeInternal {
  constexpr EarthResponse_FrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EarthResponse_FrameDefaultTypeInternal() {}
  union {
    EarthResponse_Frame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EarthResponse_FrameDefaultTypeInternal _EarthResponse_Frame_default_instance_;
constexpr EarthResponse::EarthResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frames_(){}
struct EarthResponseDefaultTypeInternal {
  constexpr EarthResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EarthResponseDefaultTypeInternal() {}
  union {
    EarthResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EarthResponseDefaultTypeInternal _EarthResponse_default_instance_;
}  // namespace EarthSimulation
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Earth_5fsimulation_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Earth_5fsimulation_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Earth_5fsimulation_2eproto = nullptr;

const uint32_t TableStruct_Earth_5fsimulation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthRequest_Nodes_Geo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthRequest_Nodes_Geo, lat_deg_),
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthRequest_Nodes_Geo, lon_deg_),
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthRequest_Nodes_Geo, alt_km_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthRequest_Nodes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthRequest_Nodes, t_rel_s_),
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthRequest_Nodes, geo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthRequest, nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthResponse_Frame_Geo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthResponse_Frame_Geo, lat_deg_),
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthResponse_Frame_Geo, lon_deg_),
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthResponse_Frame_Geo, alt_km_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthResponse_Frame_Mag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthResponse_Frame_Mag, x_nt_),
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthResponse_Frame_Mag, y_nt_),
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthResponse_Frame_Mag, z_nt_),
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthResponse_Frame_Mag, f_nt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthResponse_Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthResponse_Frame, t_rel_s_),
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthResponse_Frame, geo_),
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthResponse_Frame, mag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EarthSimulation::EarthResponse, frames_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::EarthSimulation::EarthRequest_Nodes_Geo)},
  { 9, -1, -1, sizeof(::EarthSimulation::EarthRequest_Nodes)},
  { 17, -1, -1, sizeof(::EarthSimulation::EarthRequest)},
  { 24, -1, -1, sizeof(::EarthSimulation::EarthResponse_Frame_Geo)},
  { 33, -1, -1, sizeof(::EarthSimulation::EarthResponse_Frame_Mag)},
  { 43, -1, -1, sizeof(::EarthSimulation::EarthResponse_Frame)},
  { 52, -1, -1, sizeof(::EarthSimulation::EarthResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EarthSimulation::_EarthRequest_Nodes_Geo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EarthSimulation::_EarthRequest_Nodes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EarthSimulation::_EarthRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EarthSimulation::_EarthResponse_Frame_Geo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EarthSimulation::_EarthResponse_Frame_Mag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EarthSimulation::_EarthResponse_Frame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EarthSimulation::_EarthResponse_default_instance_),
};

const char descriptor_table_protodef_Earth_5fsimulation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026Earth_simulation.proto\022\017EarthSimulatio"
  "n\"\314\001\n\014EarthRequest\0222\n\005nodes\030\001 \003(\0132#.Eart"
  "hSimulation.EarthRequest.Nodes\032\207\001\n\005Nodes"
  "\022\017\n\007t_rel_s\030\001 \001(\001\0224\n\003geo\030\002 \001(\0132\'.EarthSi"
  "mulation.EarthRequest.Nodes.Geo\0327\n\003Geo\022\017"
  "\n\007lat_deg\030\001 \001(\001\022\017\n\007lon_deg\030\002 \001(\001\022\016\n\006alt_"
  "km\030\003 \001(\001\"\306\002\n\rEarthResponse\0224\n\006frames\030\001 \003"
  "(\0132$.EarthSimulation.EarthResponse.Frame"
  "\032\376\001\n\005Frame\022\017\n\007t_rel_s\030\001 \001(\001\0225\n\003geo\030\002 \001(\013"
  "2(.EarthSimulation.EarthResponse.Frame.G"
  "eo\0225\n\003mag\030\003 \001(\0132(.EarthSimulation.EarthR"
  "esponse.Frame.Mag\0327\n\003Geo\022\017\n\007lat_deg\030\001 \001("
  "\001\022\017\n\007lon_deg\030\002 \001(\001\022\016\n\006alt_km\030\003 \001(\001\032=\n\003Ma"
  "g\022\014\n\004x_nT\030\001 \001(\001\022\014\n\004y_nT\030\002 \001(\001\022\014\n\004z_nT\030\003 "
  "\001(\001\022\014\n\004f_nT\030\004 \001(\0012h\n\026EarthSimulationServ"
  "ice\022N\n\rSendEarthData\022\035.EarthSimulation.E"
  "arthRequest\032\036.EarthSimulation.EarthRespo"
  "nseB+Z)github.com/Theossr/Helikos_test/a"
  "pi/protob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Earth_5fsimulation_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Earth_5fsimulation_2eproto = {
  false, false, 736, descriptor_table_protodef_Earth_5fsimulation_2eproto, "Earth_simulation.proto", 
  &descriptor_table_Earth_5fsimulation_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_Earth_5fsimulation_2eproto::offsets,
  file_level_metadata_Earth_5fsimulation_2eproto, file_level_enum_descriptors_Earth_5fsimulation_2eproto, file_level_service_descriptors_Earth_5fsimulation_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Earth_5fsimulation_2eproto_getter() {
  return &descriptor_table_Earth_5fsimulation_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Earth_5fsimulation_2eproto(&descriptor_table_Earth_5fsimulation_2eproto);
namespace EarthSimulation {

// ===================================================================

class EarthRequest_Nodes_Geo::_Internal {
 public:
};

EarthRequest_Nodes_Geo::EarthRequest_Nodes_Geo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EarthSimulation.EarthRequest.Nodes.Geo)
}
EarthRequest_Nodes_Geo::EarthRequest_Nodes_Geo(const EarthRequest_Nodes_Geo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lat_deg_, &from.lat_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&alt_km_) -
    reinterpret_cast<char*>(&lat_deg_)) + sizeof(alt_km_));
  // @@protoc_insertion_point(copy_constructor:EarthSimulation.EarthRequest.Nodes.Geo)
}

inline void EarthRequest_Nodes_Geo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lat_deg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&alt_km_) -
    reinterpret_cast<char*>(&lat_deg_)) + sizeof(alt_km_));
}

EarthRequest_Nodes_Geo::~EarthRequest_Nodes_Geo() {
  // @@protoc_insertion_point(destructor:EarthSimulation.EarthRequest.Nodes.Geo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EarthRequest_Nodes_Geo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EarthRequest_Nodes_Geo::ArenaDtor(void* object) {
  EarthRequest_Nodes_Geo* _this = reinterpret_cast< EarthRequest_Nodes_Geo* >(object);
  (void)_this;
}
void EarthRequest_Nodes_Geo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EarthRequest_Nodes_Geo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EarthRequest_Nodes_Geo::Clear() {
// @@protoc_insertion_point(message_clear_start:EarthSimulation.EarthRequest.Nodes.Geo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alt_km_) -
      reinterpret_cast<char*>(&lat_deg_)) + sizeof(alt_km_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EarthRequest_Nodes_Geo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double lat_deg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          lat_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lon_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          lon_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double alt_km = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          alt_km_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EarthRequest_Nodes_Geo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EarthSimulation.EarthRequest.Nodes.Geo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat_deg = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat_deg = this->_internal_lat_deg();
  uint64_t raw_lat_deg;
  memcpy(&raw_lat_deg, &tmp_lat_deg, sizeof(tmp_lat_deg));
  if (raw_lat_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat_deg(), target);
  }

  // double lon_deg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon_deg = this->_internal_lon_deg();
  uint64_t raw_lon_deg;
  memcpy(&raw_lon_deg, &tmp_lon_deg, sizeof(tmp_lon_deg));
  if (raw_lon_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lon_deg(), target);
  }

  // double alt_km = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_alt_km = this->_internal_alt_km();
  uint64_t raw_alt_km;
  memcpy(&raw_alt_km, &tmp_alt_km, sizeof(tmp_alt_km));
  if (raw_alt_km != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_alt_km(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EarthSimulation.EarthRequest.Nodes.Geo)
  return target;
}

size_t EarthRequest_Nodes_Geo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EarthSimulation.EarthRequest.Nodes.Geo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lat_deg = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat_deg = this->_internal_lat_deg();
  uint64_t raw_lat_deg;
  memcpy(&raw_lat_deg, &tmp_lat_deg, sizeof(tmp_lat_deg));
  if (raw_lat_deg != 0) {
    total_size += 1 + 8;
  }

  // double lon_deg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon_deg = this->_internal_lon_deg();
  uint64_t raw_lon_deg;
  memcpy(&raw_lon_deg, &tmp_lon_deg, sizeof(tmp_lon_deg));
  if (raw_lon_deg != 0) {
    total_size += 1 + 8;
  }

  // double alt_km = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_alt_km = this->_internal_alt_km();
  uint64_t raw_alt_km;
  memcpy(&raw_alt_km, &tmp_alt_km, sizeof(tmp_alt_km));
  if (raw_alt_km != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EarthRequest_Nodes_Geo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EarthRequest_Nodes_Geo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EarthRequest_Nodes_Geo::GetClassData() const { return &_class_data_; }

void EarthRequest_Nodes_Geo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EarthRequest_Nodes_Geo *>(to)->MergeFrom(
      static_cast<const EarthRequest_Nodes_Geo &>(from));
}


void EarthRequest_Nodes_Geo::MergeFrom(const EarthRequest_Nodes_Geo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EarthSimulation.EarthRequest.Nodes.Geo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat_deg = from._internal_lat_deg();
  uint64_t raw_lat_deg;
  memcpy(&raw_lat_deg, &tmp_lat_deg, sizeof(tmp_lat_deg));
  if (raw_lat_deg != 0) {
    _internal_set_lat_deg(from._internal_lat_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon_deg = from._internal_lon_deg();
  uint64_t raw_lon_deg;
  memcpy(&raw_lon_deg, &tmp_lon_deg, sizeof(tmp_lon_deg));
  if (raw_lon_deg != 0) {
    _internal_set_lon_deg(from._internal_lon_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_alt_km = from._internal_alt_km();
  uint64_t raw_alt_km;
  memcpy(&raw_alt_km, &tmp_alt_km, sizeof(tmp_alt_km));
  if (raw_alt_km != 0) {
    _internal_set_alt_km(from._internal_alt_km());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EarthRequest_Nodes_Geo::CopyFrom(const EarthRequest_Nodes_Geo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EarthSimulation.EarthRequest.Nodes.Geo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EarthRequest_Nodes_Geo::IsInitialized() const {
  return true;
}

void EarthRequest_Nodes_Geo::InternalSwap(EarthRequest_Nodes_Geo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EarthRequest_Nodes_Geo, alt_km_)
      + sizeof(EarthRequest_Nodes_Geo::alt_km_)
      - PROTOBUF_FIELD_OFFSET(EarthRequest_Nodes_Geo, lat_deg_)>(
          reinterpret_cast<char*>(&lat_deg_),
          reinterpret_cast<char*>(&other->lat_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EarthRequest_Nodes_Geo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Earth_5fsimulation_2eproto_getter, &descriptor_table_Earth_5fsimulation_2eproto_once,
      file_level_metadata_Earth_5fsimulation_2eproto[0]);
}

// ===================================================================

class EarthRequest_Nodes::_Internal {
 public:
  static const ::EarthSimulation::EarthRequest_Nodes_Geo& geo(const EarthRequest_Nodes* msg);
};

const ::EarthSimulation::EarthRequest_Nodes_Geo&
EarthRequest_Nodes::_Internal::geo(const EarthRequest_Nodes* msg) {
  return *msg->geo_;
}
EarthRequest_Nodes::EarthRequest_Nodes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EarthSimulation.EarthRequest.Nodes)
}
EarthRequest_Nodes::EarthRequest_Nodes(const EarthRequest_Nodes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_geo()) {
    geo_ = new ::EarthSimulation::EarthRequest_Nodes_Geo(*from.geo_);
  } else {
    geo_ = nullptr;
  }
  t_rel_s_ = from.t_rel_s_;
  // @@protoc_insertion_point(copy_constructor:EarthSimulation.EarthRequest.Nodes)
}

inline void EarthRequest_Nodes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&geo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&t_rel_s_) -
    reinterpret_cast<char*>(&geo_)) + sizeof(t_rel_s_));
}

EarthRequest_Nodes::~EarthRequest_Nodes() {
  // @@protoc_insertion_point(destructor:EarthSimulation.EarthRequest.Nodes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EarthRequest_Nodes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete geo_;
}

void EarthRequest_Nodes::ArenaDtor(void* object) {
  EarthRequest_Nodes* _this = reinterpret_cast< EarthRequest_Nodes* >(object);
  (void)_this;
}
void EarthRequest_Nodes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EarthRequest_Nodes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EarthRequest_Nodes::Clear() {
// @@protoc_insertion_point(message_clear_start:EarthSimulation.EarthRequest.Nodes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && geo_ != nullptr) {
    delete geo_;
  }
  geo_ = nullptr;
  t_rel_s_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EarthRequest_Nodes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double t_rel_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          t_rel_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .EarthSimulation.EarthRequest.Nodes.Geo geo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EarthRequest_Nodes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EarthSimulation.EarthRequest.Nodes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double t_rel_s = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_rel_s = this->_internal_t_rel_s();
  uint64_t raw_t_rel_s;
  memcpy(&raw_t_rel_s, &tmp_t_rel_s, sizeof(tmp_t_rel_s));
  if (raw_t_rel_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_t_rel_s(), target);
  }

  // .EarthSimulation.EarthRequest.Nodes.Geo geo = 2;
  if (this->_internal_has_geo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::geo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EarthSimulation.EarthRequest.Nodes)
  return target;
}

size_t EarthRequest_Nodes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EarthSimulation.EarthRequest.Nodes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .EarthSimulation.EarthRequest.Nodes.Geo geo = 2;
  if (this->_internal_has_geo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geo_);
  }

  // double t_rel_s = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_rel_s = this->_internal_t_rel_s();
  uint64_t raw_t_rel_s;
  memcpy(&raw_t_rel_s, &tmp_t_rel_s, sizeof(tmp_t_rel_s));
  if (raw_t_rel_s != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EarthRequest_Nodes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EarthRequest_Nodes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EarthRequest_Nodes::GetClassData() const { return &_class_data_; }

void EarthRequest_Nodes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EarthRequest_Nodes *>(to)->MergeFrom(
      static_cast<const EarthRequest_Nodes &>(from));
}


void EarthRequest_Nodes::MergeFrom(const EarthRequest_Nodes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EarthSimulation.EarthRequest.Nodes)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_geo()) {
    _internal_mutable_geo()->::EarthSimulation::EarthRequest_Nodes_Geo::MergeFrom(from._internal_geo());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_rel_s = from._internal_t_rel_s();
  uint64_t raw_t_rel_s;
  memcpy(&raw_t_rel_s, &tmp_t_rel_s, sizeof(tmp_t_rel_s));
  if (raw_t_rel_s != 0) {
    _internal_set_t_rel_s(from._internal_t_rel_s());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EarthRequest_Nodes::CopyFrom(const EarthRequest_Nodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EarthSimulation.EarthRequest.Nodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EarthRequest_Nodes::IsInitialized() const {
  return true;
}

void EarthRequest_Nodes::InternalSwap(EarthRequest_Nodes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EarthRequest_Nodes, t_rel_s_)
      + sizeof(EarthRequest_Nodes::t_rel_s_)
      - PROTOBUF_FIELD_OFFSET(EarthRequest_Nodes, geo_)>(
          reinterpret_cast<char*>(&geo_),
          reinterpret_cast<char*>(&other->geo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EarthRequest_Nodes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Earth_5fsimulation_2eproto_getter, &descriptor_table_Earth_5fsimulation_2eproto_once,
      file_level_metadata_Earth_5fsimulation_2eproto[1]);
}

// ===================================================================

class EarthRequest::_Internal {
 public:
};

EarthRequest::EarthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nodes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EarthSimulation.EarthRequest)
}
EarthRequest::EarthRequest(const EarthRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EarthSimulation.EarthRequest)
}

inline void EarthRequest::SharedCtor() {
}

EarthRequest::~EarthRequest() {
  // @@protoc_insertion_point(destructor:EarthSimulation.EarthRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EarthRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EarthRequest::ArenaDtor(void* object) {
  EarthRequest* _this = reinterpret_cast< EarthRequest* >(object);
  (void)_this;
}
void EarthRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EarthRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EarthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EarthSimulation.EarthRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EarthRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .EarthSimulation.EarthRequest.Nodes nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EarthRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EarthSimulation.EarthRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .EarthSimulation.EarthRequest.Nodes nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EarthSimulation.EarthRequest)
  return target;
}

size_t EarthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EarthSimulation.EarthRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EarthSimulation.EarthRequest.Nodes nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EarthRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EarthRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EarthRequest::GetClassData() const { return &_class_data_; }

void EarthRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EarthRequest *>(to)->MergeFrom(
      static_cast<const EarthRequest &>(from));
}


void EarthRequest::MergeFrom(const EarthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EarthSimulation.EarthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EarthRequest::CopyFrom(const EarthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EarthSimulation.EarthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EarthRequest::IsInitialized() const {
  return true;
}

void EarthRequest::InternalSwap(EarthRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EarthRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Earth_5fsimulation_2eproto_getter, &descriptor_table_Earth_5fsimulation_2eproto_once,
      file_level_metadata_Earth_5fsimulation_2eproto[2]);
}

// ===================================================================

class EarthResponse_Frame_Geo::_Internal {
 public:
};

EarthResponse_Frame_Geo::EarthResponse_Frame_Geo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EarthSimulation.EarthResponse.Frame.Geo)
}
EarthResponse_Frame_Geo::EarthResponse_Frame_Geo(const EarthResponse_Frame_Geo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lat_deg_, &from.lat_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&alt_km_) -
    reinterpret_cast<char*>(&lat_deg_)) + sizeof(alt_km_));
  // @@protoc_insertion_point(copy_constructor:EarthSimulation.EarthResponse.Frame.Geo)
}

inline void EarthResponse_Frame_Geo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lat_deg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&alt_km_) -
    reinterpret_cast<char*>(&lat_deg_)) + sizeof(alt_km_));
}

EarthResponse_Frame_Geo::~EarthResponse_Frame_Geo() {
  // @@protoc_insertion_point(destructor:EarthSimulation.EarthResponse.Frame.Geo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EarthResponse_Frame_Geo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EarthResponse_Frame_Geo::ArenaDtor(void* object) {
  EarthResponse_Frame_Geo* _this = reinterpret_cast< EarthResponse_Frame_Geo* >(object);
  (void)_this;
}
void EarthResponse_Frame_Geo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EarthResponse_Frame_Geo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EarthResponse_Frame_Geo::Clear() {
// @@protoc_insertion_point(message_clear_start:EarthSimulation.EarthResponse.Frame.Geo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alt_km_) -
      reinterpret_cast<char*>(&lat_deg_)) + sizeof(alt_km_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EarthResponse_Frame_Geo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double lat_deg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          lat_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lon_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          lon_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double alt_km = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          alt_km_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EarthResponse_Frame_Geo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EarthSimulation.EarthResponse.Frame.Geo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat_deg = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat_deg = this->_internal_lat_deg();
  uint64_t raw_lat_deg;
  memcpy(&raw_lat_deg, &tmp_lat_deg, sizeof(tmp_lat_deg));
  if (raw_lat_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat_deg(), target);
  }

  // double lon_deg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon_deg = this->_internal_lon_deg();
  uint64_t raw_lon_deg;
  memcpy(&raw_lon_deg, &tmp_lon_deg, sizeof(tmp_lon_deg));
  if (raw_lon_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lon_deg(), target);
  }

  // double alt_km = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_alt_km = this->_internal_alt_km();
  uint64_t raw_alt_km;
  memcpy(&raw_alt_km, &tmp_alt_km, sizeof(tmp_alt_km));
  if (raw_alt_km != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_alt_km(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EarthSimulation.EarthResponse.Frame.Geo)
  return target;
}

size_t EarthResponse_Frame_Geo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EarthSimulation.EarthResponse.Frame.Geo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lat_deg = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat_deg = this->_internal_lat_deg();
  uint64_t raw_lat_deg;
  memcpy(&raw_lat_deg, &tmp_lat_deg, sizeof(tmp_lat_deg));
  if (raw_lat_deg != 0) {
    total_size += 1 + 8;
  }

  // double lon_deg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon_deg = this->_internal_lon_deg();
  uint64_t raw_lon_deg;
  memcpy(&raw_lon_deg, &tmp_lon_deg, sizeof(tmp_lon_deg));
  if (raw_lon_deg != 0) {
    total_size += 1 + 8;
  }

  // double alt_km = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_alt_km = this->_internal_alt_km();
  uint64_t raw_alt_km;
  memcpy(&raw_alt_km, &tmp_alt_km, sizeof(tmp_alt_km));
  if (raw_alt_km != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EarthResponse_Frame_Geo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EarthResponse_Frame_Geo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EarthResponse_Frame_Geo::GetClassData() const { return &_class_data_; }

void EarthResponse_Frame_Geo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EarthResponse_Frame_Geo *>(to)->MergeFrom(
      static_cast<const EarthResponse_Frame_Geo &>(from));
}


void EarthResponse_Frame_Geo::MergeFrom(const EarthResponse_Frame_Geo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EarthSimulation.EarthResponse.Frame.Geo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat_deg = from._internal_lat_deg();
  uint64_t raw_lat_deg;
  memcpy(&raw_lat_deg, &tmp_lat_deg, sizeof(tmp_lat_deg));
  if (raw_lat_deg != 0) {
    _internal_set_lat_deg(from._internal_lat_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon_deg = from._internal_lon_deg();
  uint64_t raw_lon_deg;
  memcpy(&raw_lon_deg, &tmp_lon_deg, sizeof(tmp_lon_deg));
  if (raw_lon_deg != 0) {
    _internal_set_lon_deg(from._internal_lon_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_alt_km = from._internal_alt_km();
  uint64_t raw_alt_km;
  memcpy(&raw_alt_km, &tmp_alt_km, sizeof(tmp_alt_km));
  if (raw_alt_km != 0) {
    _internal_set_alt_km(from._internal_alt_km());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EarthResponse_Frame_Geo::CopyFrom(const EarthResponse_Frame_Geo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EarthSimulation.EarthResponse.Frame.Geo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EarthResponse_Frame_Geo::IsInitialized() const {
  return true;
}

void EarthResponse_Frame_Geo::InternalSwap(EarthResponse_Frame_Geo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EarthResponse_Frame_Geo, alt_km_)
      + sizeof(EarthResponse_Frame_Geo::alt_km_)
      - PROTOBUF_FIELD_OFFSET(EarthResponse_Frame_Geo, lat_deg_)>(
          reinterpret_cast<char*>(&lat_deg_),
          reinterpret_cast<char*>(&other->lat_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EarthResponse_Frame_Geo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Earth_5fsimulation_2eproto_getter, &descriptor_table_Earth_5fsimulation_2eproto_once,
      file_level_metadata_Earth_5fsimulation_2eproto[3]);
}

// ===================================================================

class EarthResponse_Frame_Mag::_Internal {
 public:
};

EarthResponse_Frame_Mag::EarthResponse_Frame_Mag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EarthSimulation.EarthResponse.Frame.Mag)
}
EarthResponse_Frame_Mag::EarthResponse_Frame_Mag(const EarthResponse_Frame_Mag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_nt_, &from.x_nt_,
    static_cast<size_t>(reinterpret_cast<char*>(&f_nt_) -
    reinterpret_cast<char*>(&x_nt_)) + sizeof(f_nt_));
  // @@protoc_insertion_point(copy_constructor:EarthSimulation.EarthResponse.Frame.Mag)
}

inline void EarthResponse_Frame_Mag::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_nt_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f_nt_) -
    reinterpret_cast<char*>(&x_nt_)) + sizeof(f_nt_));
}

EarthResponse_Frame_Mag::~EarthResponse_Frame_Mag() {
  // @@protoc_insertion_point(destructor:EarthSimulation.EarthResponse.Frame.Mag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EarthResponse_Frame_Mag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EarthResponse_Frame_Mag::ArenaDtor(void* object) {
  EarthResponse_Frame_Mag* _this = reinterpret_cast< EarthResponse_Frame_Mag* >(object);
  (void)_this;
}
void EarthResponse_Frame_Mag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EarthResponse_Frame_Mag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EarthResponse_Frame_Mag::Clear() {
// @@protoc_insertion_point(message_clear_start:EarthSimulation.EarthResponse.Frame.Mag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_nt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f_nt_) -
      reinterpret_cast<char*>(&x_nt_)) + sizeof(f_nt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EarthResponse_Frame_Mag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x_nT = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          x_nt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y_nT = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          y_nt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z_nT = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          z_nt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double f_nT = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          f_nt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EarthResponse_Frame_Mag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EarthSimulation.EarthResponse.Frame.Mag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x_nT = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x_nt = this->_internal_x_nt();
  uint64_t raw_x_nt;
  memcpy(&raw_x_nt, &tmp_x_nt, sizeof(tmp_x_nt));
  if (raw_x_nt != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x_nt(), target);
  }

  // double y_nT = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y_nt = this->_internal_y_nt();
  uint64_t raw_y_nt;
  memcpy(&raw_y_nt, &tmp_y_nt, sizeof(tmp_y_nt));
  if (raw_y_nt != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y_nt(), target);
  }

  // double z_nT = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z_nt = this->_internal_z_nt();
  uint64_t raw_z_nt;
  memcpy(&raw_z_nt, &tmp_z_nt, sizeof(tmp_z_nt));
  if (raw_z_nt != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z_nt(), target);
  }

  // double f_nT = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_f_nt = this->_internal_f_nt();
  uint64_t raw_f_nt;
  memcpy(&raw_f_nt, &tmp_f_nt, sizeof(tmp_f_nt));
  if (raw_f_nt != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_f_nt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EarthSimulation.EarthResponse.Frame.Mag)
  return target;
}

size_t EarthResponse_Frame_Mag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EarthSimulation.EarthResponse.Frame.Mag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x_nT = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x_nt = this->_internal_x_nt();
  uint64_t raw_x_nt;
  memcpy(&raw_x_nt, &tmp_x_nt, sizeof(tmp_x_nt));
  if (raw_x_nt != 0) {
    total_size += 1 + 8;
  }

  // double y_nT = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y_nt = this->_internal_y_nt();
  uint64_t raw_y_nt;
  memcpy(&raw_y_nt, &tmp_y_nt, sizeof(tmp_y_nt));
  if (raw_y_nt != 0) {
    total_size += 1 + 8;
  }

  // double z_nT = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z_nt = this->_internal_z_nt();
  uint64_t raw_z_nt;
  memcpy(&raw_z_nt, &tmp_z_nt, sizeof(tmp_z_nt));
  if (raw_z_nt != 0) {
    total_size += 1 + 8;
  }

  // double f_nT = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_f_nt = this->_internal_f_nt();
  uint64_t raw_f_nt;
  memcpy(&raw_f_nt, &tmp_f_nt, sizeof(tmp_f_nt));
  if (raw_f_nt != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EarthResponse_Frame_Mag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EarthResponse_Frame_Mag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EarthResponse_Frame_Mag::GetClassData() const { return &_class_data_; }

void EarthResponse_Frame_Mag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EarthResponse_Frame_Mag *>(to)->MergeFrom(
      static_cast<const EarthResponse_Frame_Mag &>(from));
}


void EarthResponse_Frame_Mag::MergeFrom(const EarthResponse_Frame_Mag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EarthSimulation.EarthResponse.Frame.Mag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x_nt = from._internal_x_nt();
  uint64_t raw_x_nt;
  memcpy(&raw_x_nt, &tmp_x_nt, sizeof(tmp_x_nt));
  if (raw_x_nt != 0) {
    _internal_set_x_nt(from._internal_x_nt());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y_nt = from._internal_y_nt();
  uint64_t raw_y_nt;
  memcpy(&raw_y_nt, &tmp_y_nt, sizeof(tmp_y_nt));
  if (raw_y_nt != 0) {
    _internal_set_y_nt(from._internal_y_nt());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z_nt = from._internal_z_nt();
  uint64_t raw_z_nt;
  memcpy(&raw_z_nt, &tmp_z_nt, sizeof(tmp_z_nt));
  if (raw_z_nt != 0) {
    _internal_set_z_nt(from._internal_z_nt());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_f_nt = from._internal_f_nt();
  uint64_t raw_f_nt;
  memcpy(&raw_f_nt, &tmp_f_nt, sizeof(tmp_f_nt));
  if (raw_f_nt != 0) {
    _internal_set_f_nt(from._internal_f_nt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EarthResponse_Frame_Mag::CopyFrom(const EarthResponse_Frame_Mag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EarthSimulation.EarthResponse.Frame.Mag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EarthResponse_Frame_Mag::IsInitialized() const {
  return true;
}

void EarthResponse_Frame_Mag::InternalSwap(EarthResponse_Frame_Mag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EarthResponse_Frame_Mag, f_nt_)
      + sizeof(EarthResponse_Frame_Mag::f_nt_)
      - PROTOBUF_FIELD_OFFSET(EarthResponse_Frame_Mag, x_nt_)>(
          reinterpret_cast<char*>(&x_nt_),
          reinterpret_cast<char*>(&other->x_nt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EarthResponse_Frame_Mag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Earth_5fsimulation_2eproto_getter, &descriptor_table_Earth_5fsimulation_2eproto_once,
      file_level_metadata_Earth_5fsimulation_2eproto[4]);
}

// ===================================================================

class EarthResponse_Frame::_Internal {
 public:
  static const ::EarthSimulation::EarthResponse_Frame_Geo& geo(const EarthResponse_Frame* msg);
  static const ::EarthSimulation::EarthResponse_Frame_Mag& mag(const EarthResponse_Frame* msg);
};

const ::EarthSimulation::EarthResponse_Frame_Geo&
EarthResponse_Frame::_Internal::geo(const EarthResponse_Frame* msg) {
  return *msg->geo_;
}
const ::EarthSimulation::EarthResponse_Frame_Mag&
EarthResponse_Frame::_Internal::mag(const EarthResponse_Frame* msg) {
  return *msg->mag_;
}
EarthResponse_Frame::EarthResponse_Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EarthSimulation.EarthResponse.Frame)
}
EarthResponse_Frame::EarthResponse_Frame(const EarthResponse_Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_geo()) {
    geo_ = new ::EarthSimulation::EarthResponse_Frame_Geo(*from.geo_);
  } else {
    geo_ = nullptr;
  }
  if (from._internal_has_mag()) {
    mag_ = new ::EarthSimulation::EarthResponse_Frame_Mag(*from.mag_);
  } else {
    mag_ = nullptr;
  }
  t_rel_s_ = from.t_rel_s_;
  // @@protoc_insertion_point(copy_constructor:EarthSimulation.EarthResponse.Frame)
}

inline void EarthResponse_Frame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&geo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&t_rel_s_) -
    reinterpret_cast<char*>(&geo_)) + sizeof(t_rel_s_));
}

EarthResponse_Frame::~EarthResponse_Frame() {
  // @@protoc_insertion_point(destructor:EarthSimulation.EarthResponse.Frame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EarthResponse_Frame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete geo_;
  if (this != internal_default_instance()) delete mag_;
}

void EarthResponse_Frame::ArenaDtor(void* object) {
  EarthResponse_Frame* _this = reinterpret_cast< EarthResponse_Frame* >(object);
  (void)_this;
}
void EarthResponse_Frame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EarthResponse_Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EarthResponse_Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:EarthSimulation.EarthResponse.Frame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && geo_ != nullptr) {
    delete geo_;
  }
  geo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mag_ != nullptr) {
    delete mag_;
  }
  mag_ = nullptr;
  t_rel_s_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EarthResponse_Frame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double t_rel_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          t_rel_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .EarthSimulation.EarthResponse.Frame.Geo geo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .EarthSimulation.EarthResponse.Frame.Mag mag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EarthResponse_Frame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EarthSimulation.EarthResponse.Frame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double t_rel_s = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_rel_s = this->_internal_t_rel_s();
  uint64_t raw_t_rel_s;
  memcpy(&raw_t_rel_s, &tmp_t_rel_s, sizeof(tmp_t_rel_s));
  if (raw_t_rel_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_t_rel_s(), target);
  }

  // .EarthSimulation.EarthResponse.Frame.Geo geo = 2;
  if (this->_internal_has_geo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::geo(this), target, stream);
  }

  // .EarthSimulation.EarthResponse.Frame.Mag mag = 3;
  if (this->_internal_has_mag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mag(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EarthSimulation.EarthResponse.Frame)
  return target;
}

size_t EarthResponse_Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EarthSimulation.EarthResponse.Frame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .EarthSimulation.EarthResponse.Frame.Geo geo = 2;
  if (this->_internal_has_geo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geo_);
  }

  // .EarthSimulation.EarthResponse.Frame.Mag mag = 3;
  if (this->_internal_has_mag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mag_);
  }

  // double t_rel_s = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_rel_s = this->_internal_t_rel_s();
  uint64_t raw_t_rel_s;
  memcpy(&raw_t_rel_s, &tmp_t_rel_s, sizeof(tmp_t_rel_s));
  if (raw_t_rel_s != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EarthResponse_Frame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EarthResponse_Frame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EarthResponse_Frame::GetClassData() const { return &_class_data_; }

void EarthResponse_Frame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EarthResponse_Frame *>(to)->MergeFrom(
      static_cast<const EarthResponse_Frame &>(from));
}


void EarthResponse_Frame::MergeFrom(const EarthResponse_Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EarthSimulation.EarthResponse.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_geo()) {
    _internal_mutable_geo()->::EarthSimulation::EarthResponse_Frame_Geo::MergeFrom(from._internal_geo());
  }
  if (from._internal_has_mag()) {
    _internal_mutable_mag()->::EarthSimulation::EarthResponse_Frame_Mag::MergeFrom(from._internal_mag());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_rel_s = from._internal_t_rel_s();
  uint64_t raw_t_rel_s;
  memcpy(&raw_t_rel_s, &tmp_t_rel_s, sizeof(tmp_t_rel_s));
  if (raw_t_rel_s != 0) {
    _internal_set_t_rel_s(from._internal_t_rel_s());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EarthResponse_Frame::CopyFrom(const EarthResponse_Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EarthSimulation.EarthResponse.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EarthResponse_Frame::IsInitialized() const {
  return true;
}

void EarthResponse_Frame::InternalSwap(EarthResponse_Frame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EarthResponse_Frame, t_rel_s_)
      + sizeof(EarthResponse_Frame::t_rel_s_)
      - PROTOBUF_FIELD_OFFSET(EarthResponse_Frame, geo_)>(
          reinterpret_cast<char*>(&geo_),
          reinterpret_cast<char*>(&other->geo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EarthResponse_Frame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Earth_5fsimulation_2eproto_getter, &descriptor_table_Earth_5fsimulation_2eproto_once,
      file_level_metadata_Earth_5fsimulation_2eproto[5]);
}

// ===================================================================

class EarthResponse::_Internal {
 public:
};

EarthResponse::EarthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  frames_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EarthSimulation.EarthResponse)
}
EarthResponse::EarthResponse(const EarthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      frames_(from.frames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EarthSimulation.EarthResponse)
}

inline void EarthResponse::SharedCtor() {
}

EarthResponse::~EarthResponse() {
  // @@protoc_insertion_point(destructor:EarthSimulation.EarthResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EarthResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EarthResponse::ArenaDtor(void* object) {
  EarthResponse* _this = reinterpret_cast< EarthResponse* >(object);
  (void)_this;
}
void EarthResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EarthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EarthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:EarthSimulation.EarthResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frames_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EarthResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .EarthSimulation.EarthResponse.Frame frames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EarthResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EarthSimulation.EarthResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .EarthSimulation.EarthResponse.Frame frames = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_frames(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EarthSimulation.EarthResponse)
  return target;
}

size_t EarthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EarthSimulation.EarthResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EarthSimulation.EarthResponse.Frame frames = 1;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EarthResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EarthResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EarthResponse::GetClassData() const { return &_class_data_; }

void EarthResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EarthResponse *>(to)->MergeFrom(
      static_cast<const EarthResponse &>(from));
}


void EarthResponse::MergeFrom(const EarthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EarthSimulation.EarthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EarthResponse::CopyFrom(const EarthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EarthSimulation.EarthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EarthResponse::IsInitialized() const {
  return true;
}

void EarthResponse::InternalSwap(EarthResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  frames_.InternalSwap(&other->frames_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EarthResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Earth_5fsimulation_2eproto_getter, &descriptor_table_Earth_5fsimulation_2eproto_once,
      file_level_metadata_Earth_5fsimulation_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace EarthSimulation
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::EarthSimulation::EarthRequest_Nodes_Geo* Arena::CreateMaybeMessage< ::EarthSimulation::EarthRequest_Nodes_Geo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EarthSimulation::EarthRequest_Nodes_Geo >(arena);
}
template<> PROTOBUF_NOINLINE ::EarthSimulation::EarthRequest_Nodes* Arena::CreateMaybeMessage< ::EarthSimulation::EarthRequest_Nodes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EarthSimulation::EarthRequest_Nodes >(arena);
}
template<> PROTOBUF_NOINLINE ::EarthSimulation::EarthRequest* Arena::CreateMaybeMessage< ::EarthSimulation::EarthRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EarthSimulation::EarthRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::EarthSimulation::EarthResponse_Frame_Geo* Arena::CreateMaybeMessage< ::EarthSimulation::EarthResponse_Frame_Geo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EarthSimulation::EarthResponse_Frame_Geo >(arena);
}
template<> PROTOBUF_NOINLINE ::EarthSimulation::EarthResponse_Frame_Mag* Arena::CreateMaybeMessage< ::EarthSimulation::EarthResponse_Frame_Mag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EarthSimulation::EarthResponse_Frame_Mag >(arena);
}
template<> PROTOBUF_NOINLINE ::EarthSimulation::EarthResponse_Frame* Arena::CreateMaybeMessage< ::EarthSimulation::EarthResponse_Frame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EarthSimulation::EarthResponse_Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::EarthSimulation::EarthResponse* Arena::CreateMaybeMessage< ::EarthSimulation::EarthResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EarthSimulation::EarthResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
