// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: satellite_Earth_simulation.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SatelliteEarthSimulationService_RunSimulation_FullMethodName = "/SatelliteEarthSimulation.SatelliteEarthSimulationService/RunSimulation"
)

// SatelliteEarthSimulationServiceClient is the client API for SatelliteEarthSimulationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SatelliteEarthSimulationServiceClient interface {
	RunSimulation(ctx context.Context, in *SimRequest, opts ...grpc.CallOption) (*SimResponse, error)
}

type satelliteEarthSimulationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSatelliteEarthSimulationServiceClient(cc grpc.ClientConnInterface) SatelliteEarthSimulationServiceClient {
	return &satelliteEarthSimulationServiceClient{cc}
}

func (c *satelliteEarthSimulationServiceClient) RunSimulation(ctx context.Context, in *SimRequest, opts ...grpc.CallOption) (*SimResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimResponse)
	err := c.cc.Invoke(ctx, SatelliteEarthSimulationService_RunSimulation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SatelliteEarthSimulationServiceServer is the server API for SatelliteEarthSimulationService service.
// All implementations must embed UnimplementedSatelliteEarthSimulationServiceServer
// for forward compatibility
type SatelliteEarthSimulationServiceServer interface {
	RunSimulation(context.Context, *SimRequest) (*SimResponse, error)
	mustEmbedUnimplementedSatelliteEarthSimulationServiceServer()
}

// UnimplementedSatelliteEarthSimulationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSatelliteEarthSimulationServiceServer struct {
}

func (UnimplementedSatelliteEarthSimulationServiceServer) RunSimulation(context.Context, *SimRequest) (*SimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSimulation not implemented")
}
func (UnimplementedSatelliteEarthSimulationServiceServer) mustEmbedUnimplementedSatelliteEarthSimulationServiceServer() {
}

// UnsafeSatelliteEarthSimulationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SatelliteEarthSimulationServiceServer will
// result in compilation errors.
type UnsafeSatelliteEarthSimulationServiceServer interface {
	mustEmbedUnimplementedSatelliteEarthSimulationServiceServer()
}

func RegisterSatelliteEarthSimulationServiceServer(s grpc.ServiceRegistrar, srv SatelliteEarthSimulationServiceServer) {
	s.RegisterService(&SatelliteEarthSimulationService_ServiceDesc, srv)
}

func _SatelliteEarthSimulationService_RunSimulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SatelliteEarthSimulationServiceServer).RunSimulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SatelliteEarthSimulationService_RunSimulation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SatelliteEarthSimulationServiceServer).RunSimulation(ctx, req.(*SimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SatelliteEarthSimulationService_ServiceDesc is the grpc.ServiceDesc for SatelliteEarthSimulationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SatelliteEarthSimulationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SatelliteEarthSimulation.SatelliteEarthSimulationService",
	HandlerType: (*SatelliteEarthSimulationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunSimulation",
			Handler:    _SatelliteEarthSimulationService_RunSimulation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "satellite_Earth_simulation.proto",
}
