// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: satellite_Earth_simulation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_satellite_5fEarth_5fsimulation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_satellite_5fEarth_5fsimulation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_satellite_5fEarth_5fsimulation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_satellite_5fEarth_5fsimulation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_satellite_5fEarth_5fsimulation_2eproto;
namespace SatelliteEarthSimulation {
class SimRequest;
struct SimRequestDefaultTypeInternal;
extern SimRequestDefaultTypeInternal _SimRequest_default_instance_;
class SimRequest_TLE;
struct SimRequest_TLEDefaultTypeInternal;
extern SimRequest_TLEDefaultTypeInternal _SimRequest_TLE_default_instance_;
class SimResponse;
struct SimResponseDefaultTypeInternal;
extern SimResponseDefaultTypeInternal _SimResponse_default_instance_;
class SimResponse_Decay;
struct SimResponse_DecayDefaultTypeInternal;
extern SimResponse_DecayDefaultTypeInternal _SimResponse_Decay_default_instance_;
class SimResponse_Decay_PhysicsDrag;
struct SimResponse_Decay_PhysicsDragDefaultTypeInternal;
extern SimResponse_Decay_PhysicsDragDefaultTypeInternal _SimResponse_Decay_PhysicsDrag_default_instance_;
class SimResponse_Decay_TLEForward;
struct SimResponse_Decay_TLEForwardDefaultTypeInternal;
extern SimResponse_Decay_TLEForwardDefaultTypeInternal _SimResponse_Decay_TLEForward_default_instance_;
class SimResponse_Frame;
struct SimResponse_FrameDefaultTypeInternal;
extern SimResponse_FrameDefaultTypeInternal _SimResponse_Frame_default_instance_;
class SimResponse_Frame_Geo;
struct SimResponse_Frame_GeoDefaultTypeInternal;
extern SimResponse_Frame_GeoDefaultTypeInternal _SimResponse_Frame_Geo_default_instance_;
class SimResponse_Frame_Mag;
struct SimResponse_Frame_MagDefaultTypeInternal;
extern SimResponse_Frame_MagDefaultTypeInternal _SimResponse_Frame_Mag_default_instance_;
class SimResponse_Meta;
struct SimResponse_MetaDefaultTypeInternal;
extern SimResponse_MetaDefaultTypeInternal _SimResponse_Meta_default_instance_;
}  // namespace SatelliteEarthSimulation
PROTOBUF_NAMESPACE_OPEN
template<> ::SatelliteEarthSimulation::SimRequest* Arena::CreateMaybeMessage<::SatelliteEarthSimulation::SimRequest>(Arena*);
template<> ::SatelliteEarthSimulation::SimRequest_TLE* Arena::CreateMaybeMessage<::SatelliteEarthSimulation::SimRequest_TLE>(Arena*);
template<> ::SatelliteEarthSimulation::SimResponse* Arena::CreateMaybeMessage<::SatelliteEarthSimulation::SimResponse>(Arena*);
template<> ::SatelliteEarthSimulation::SimResponse_Decay* Arena::CreateMaybeMessage<::SatelliteEarthSimulation::SimResponse_Decay>(Arena*);
template<> ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag* Arena::CreateMaybeMessage<::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag>(Arena*);
template<> ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward* Arena::CreateMaybeMessage<::SatelliteEarthSimulation::SimResponse_Decay_TLEForward>(Arena*);
template<> ::SatelliteEarthSimulation::SimResponse_Frame* Arena::CreateMaybeMessage<::SatelliteEarthSimulation::SimResponse_Frame>(Arena*);
template<> ::SatelliteEarthSimulation::SimResponse_Frame_Geo* Arena::CreateMaybeMessage<::SatelliteEarthSimulation::SimResponse_Frame_Geo>(Arena*);
template<> ::SatelliteEarthSimulation::SimResponse_Frame_Mag* Arena::CreateMaybeMessage<::SatelliteEarthSimulation::SimResponse_Frame_Mag>(Arena*);
template<> ::SatelliteEarthSimulation::SimResponse_Meta* Arena::CreateMaybeMessage<::SatelliteEarthSimulation::SimResponse_Meta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SatelliteEarthSimulation {

// ===================================================================

class SimRequest_TLE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SatelliteEarthSimulation.SimRequest.TLE) */ {
 public:
  inline SimRequest_TLE() : SimRequest_TLE(nullptr) {}
  ~SimRequest_TLE() override;
  explicit PROTOBUF_CONSTEXPR SimRequest_TLE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimRequest_TLE(const SimRequest_TLE& from);
  SimRequest_TLE(SimRequest_TLE&& from) noexcept
    : SimRequest_TLE() {
    *this = ::std::move(from);
  }

  inline SimRequest_TLE& operator=(const SimRequest_TLE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimRequest_TLE& operator=(SimRequest_TLE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimRequest_TLE& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimRequest_TLE* internal_default_instance() {
    return reinterpret_cast<const SimRequest_TLE*>(
               &_SimRequest_TLE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SimRequest_TLE& a, SimRequest_TLE& b) {
    a.Swap(&b);
  }
  inline void Swap(SimRequest_TLE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimRequest_TLE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimRequest_TLE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimRequest_TLE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimRequest_TLE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimRequest_TLE& from) {
    SimRequest_TLE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimRequest_TLE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SatelliteEarthSimulation.SimRequest.TLE";
  }
  protected:
  explicit SimRequest_TLE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kLine1FieldNumber = 2,
    kLine2FieldNumber = 3,
  };
  // string title = 1;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string line1 = 2;
  void clear_line1();
  const std::string& line1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_line1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_line1();
  PROTOBUF_NODISCARD std::string* release_line1();
  void set_allocated_line1(std::string* line1);
  private:
  const std::string& _internal_line1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_line1(const std::string& value);
  std::string* _internal_mutable_line1();
  public:

  // string line2 = 3;
  void clear_line2();
  const std::string& line2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_line2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_line2();
  PROTOBUF_NODISCARD std::string* release_line2();
  void set_allocated_line2(std::string* line2);
  private:
  const std::string& _internal_line2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_line2(const std::string& value);
  std::string* _internal_mutable_line2();
  public:

  // @@protoc_insertion_point(class_scope:SatelliteEarthSimulation.SimRequest.TLE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_satellite_5fEarth_5fsimulation_2eproto;
};
// -------------------------------------------------------------------

class SimRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SatelliteEarthSimulation.SimRequest) */ {
 public:
  inline SimRequest() : SimRequest(nullptr) {}
  ~SimRequest() override;
  explicit PROTOBUF_CONSTEXPR SimRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimRequest(const SimRequest& from);
  SimRequest(SimRequest&& from) noexcept
    : SimRequest() {
    *this = ::std::move(from);
  }

  inline SimRequest& operator=(const SimRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimRequest& operator=(SimRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimRequest* internal_default_instance() {
    return reinterpret_cast<const SimRequest*>(
               &_SimRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SimRequest& a, SimRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SimRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimRequest& from) {
    SimRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SatelliteEarthSimulation.SimRequest";
  }
  protected:
  explicit SimRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SimRequest_TLE TLE;

  // accessors -------------------------------------------------------

  enum : int {
    kTleFieldNumber = 1,
    kStartEpochMsFieldNumber = 2,
    kDurationSFieldNumber = 3,
    kStepSFieldNumber = 4,
    kHFailKmFieldNumber = 5,
  };
  // .SatelliteEarthSimulation.SimRequest.TLE tle = 1;
  bool has_tle() const;
  private:
  bool _internal_has_tle() const;
  public:
  void clear_tle();
  const ::SatelliteEarthSimulation::SimRequest_TLE& tle() const;
  PROTOBUF_NODISCARD ::SatelliteEarthSimulation::SimRequest_TLE* release_tle();
  ::SatelliteEarthSimulation::SimRequest_TLE* mutable_tle();
  void set_allocated_tle(::SatelliteEarthSimulation::SimRequest_TLE* tle);
  private:
  const ::SatelliteEarthSimulation::SimRequest_TLE& _internal_tle() const;
  ::SatelliteEarthSimulation::SimRequest_TLE* _internal_mutable_tle();
  public:
  void unsafe_arena_set_allocated_tle(
      ::SatelliteEarthSimulation::SimRequest_TLE* tle);
  ::SatelliteEarthSimulation::SimRequest_TLE* unsafe_arena_release_tle();

  // uint64 start_epoch_ms = 2;
  void clear_start_epoch_ms();
  uint64_t start_epoch_ms() const;
  void set_start_epoch_ms(uint64_t value);
  private:
  uint64_t _internal_start_epoch_ms() const;
  void _internal_set_start_epoch_ms(uint64_t value);
  public:

  // double duration_s = 3;
  void clear_duration_s();
  double duration_s() const;
  void set_duration_s(double value);
  private:
  double _internal_duration_s() const;
  void _internal_set_duration_s(double value);
  public:

  // double step_s = 4;
  void clear_step_s();
  double step_s() const;
  void set_step_s(double value);
  private:
  double _internal_step_s() const;
  void _internal_set_step_s(double value);
  public:

  // double h_fail_km = 5;
  void clear_h_fail_km();
  double h_fail_km() const;
  void set_h_fail_km(double value);
  private:
  double _internal_h_fail_km() const;
  void _internal_set_h_fail_km(double value);
  public:

  // @@protoc_insertion_point(class_scope:SatelliteEarthSimulation.SimRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::SatelliteEarthSimulation::SimRequest_TLE* tle_;
    uint64_t start_epoch_ms_;
    double duration_s_;
    double step_s_;
    double h_fail_km_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_satellite_5fEarth_5fsimulation_2eproto;
};
// -------------------------------------------------------------------

class SimResponse_Frame_Geo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SatelliteEarthSimulation.SimResponse.Frame.Geo) */ {
 public:
  inline SimResponse_Frame_Geo() : SimResponse_Frame_Geo(nullptr) {}
  ~SimResponse_Frame_Geo() override;
  explicit PROTOBUF_CONSTEXPR SimResponse_Frame_Geo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimResponse_Frame_Geo(const SimResponse_Frame_Geo& from);
  SimResponse_Frame_Geo(SimResponse_Frame_Geo&& from) noexcept
    : SimResponse_Frame_Geo() {
    *this = ::std::move(from);
  }

  inline SimResponse_Frame_Geo& operator=(const SimResponse_Frame_Geo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimResponse_Frame_Geo& operator=(SimResponse_Frame_Geo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimResponse_Frame_Geo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimResponse_Frame_Geo* internal_default_instance() {
    return reinterpret_cast<const SimResponse_Frame_Geo*>(
               &_SimResponse_Frame_Geo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SimResponse_Frame_Geo& a, SimResponse_Frame_Geo& b) {
    a.Swap(&b);
  }
  inline void Swap(SimResponse_Frame_Geo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimResponse_Frame_Geo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimResponse_Frame_Geo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimResponse_Frame_Geo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimResponse_Frame_Geo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimResponse_Frame_Geo& from) {
    SimResponse_Frame_Geo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimResponse_Frame_Geo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SatelliteEarthSimulation.SimResponse.Frame.Geo";
  }
  protected:
  explicit SimResponse_Frame_Geo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatDegFieldNumber = 1,
    kLonDegFieldNumber = 2,
    kAltKmFieldNumber = 3,
  };
  // double lat_deg = 1;
  void clear_lat_deg();
  double lat_deg() const;
  void set_lat_deg(double value);
  private:
  double _internal_lat_deg() const;
  void _internal_set_lat_deg(double value);
  public:

  // double lon_deg = 2;
  void clear_lon_deg();
  double lon_deg() const;
  void set_lon_deg(double value);
  private:
  double _internal_lon_deg() const;
  void _internal_set_lon_deg(double value);
  public:

  // double alt_km = 3;
  void clear_alt_km();
  double alt_km() const;
  void set_alt_km(double value);
  private:
  double _internal_alt_km() const;
  void _internal_set_alt_km(double value);
  public:

  // @@protoc_insertion_point(class_scope:SatelliteEarthSimulation.SimResponse.Frame.Geo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double lat_deg_;
    double lon_deg_;
    double alt_km_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_satellite_5fEarth_5fsimulation_2eproto;
};
// -------------------------------------------------------------------

class SimResponse_Frame_Mag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SatelliteEarthSimulation.SimResponse.Frame.Mag) */ {
 public:
  inline SimResponse_Frame_Mag() : SimResponse_Frame_Mag(nullptr) {}
  ~SimResponse_Frame_Mag() override;
  explicit PROTOBUF_CONSTEXPR SimResponse_Frame_Mag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimResponse_Frame_Mag(const SimResponse_Frame_Mag& from);
  SimResponse_Frame_Mag(SimResponse_Frame_Mag&& from) noexcept
    : SimResponse_Frame_Mag() {
    *this = ::std::move(from);
  }

  inline SimResponse_Frame_Mag& operator=(const SimResponse_Frame_Mag& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimResponse_Frame_Mag& operator=(SimResponse_Frame_Mag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimResponse_Frame_Mag& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimResponse_Frame_Mag* internal_default_instance() {
    return reinterpret_cast<const SimResponse_Frame_Mag*>(
               &_SimResponse_Frame_Mag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SimResponse_Frame_Mag& a, SimResponse_Frame_Mag& b) {
    a.Swap(&b);
  }
  inline void Swap(SimResponse_Frame_Mag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimResponse_Frame_Mag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimResponse_Frame_Mag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimResponse_Frame_Mag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimResponse_Frame_Mag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimResponse_Frame_Mag& from) {
    SimResponse_Frame_Mag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimResponse_Frame_Mag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SatelliteEarthSimulation.SimResponse.Frame.Mag";
  }
  protected:
  explicit SimResponse_Frame_Mag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXNTFieldNumber = 1,
    kYNTFieldNumber = 2,
    kZNTFieldNumber = 3,
    kFNTFieldNumber = 4,
  };
  // double x_nT = 1;
  void clear_x_nt();
  double x_nt() const;
  void set_x_nt(double value);
  private:
  double _internal_x_nt() const;
  void _internal_set_x_nt(double value);
  public:

  // double y_nT = 2;
  void clear_y_nt();
  double y_nt() const;
  void set_y_nt(double value);
  private:
  double _internal_y_nt() const;
  void _internal_set_y_nt(double value);
  public:

  // double z_nT = 3;
  void clear_z_nt();
  double z_nt() const;
  void set_z_nt(double value);
  private:
  double _internal_z_nt() const;
  void _internal_set_z_nt(double value);
  public:

  // double f_nT = 4;
  void clear_f_nt();
  double f_nt() const;
  void set_f_nt(double value);
  private:
  double _internal_f_nt() const;
  void _internal_set_f_nt(double value);
  public:

  // @@protoc_insertion_point(class_scope:SatelliteEarthSimulation.SimResponse.Frame.Mag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_nt_;
    double y_nt_;
    double z_nt_;
    double f_nt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_satellite_5fEarth_5fsimulation_2eproto;
};
// -------------------------------------------------------------------

class SimResponse_Frame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SatelliteEarthSimulation.SimResponse.Frame) */ {
 public:
  inline SimResponse_Frame() : SimResponse_Frame(nullptr) {}
  ~SimResponse_Frame() override;
  explicit PROTOBUF_CONSTEXPR SimResponse_Frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimResponse_Frame(const SimResponse_Frame& from);
  SimResponse_Frame(SimResponse_Frame&& from) noexcept
    : SimResponse_Frame() {
    *this = ::std::move(from);
  }

  inline SimResponse_Frame& operator=(const SimResponse_Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimResponse_Frame& operator=(SimResponse_Frame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimResponse_Frame& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimResponse_Frame* internal_default_instance() {
    return reinterpret_cast<const SimResponse_Frame*>(
               &_SimResponse_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SimResponse_Frame& a, SimResponse_Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(SimResponse_Frame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimResponse_Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimResponse_Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimResponse_Frame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimResponse_Frame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimResponse_Frame& from) {
    SimResponse_Frame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimResponse_Frame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SatelliteEarthSimulation.SimResponse.Frame";
  }
  protected:
  explicit SimResponse_Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SimResponse_Frame_Geo Geo;
  typedef SimResponse_Frame_Mag Mag;

  // accessors -------------------------------------------------------

  enum : int {
    kGeoFieldNumber = 2,
    kMagFieldNumber = 3,
    kTRelSFieldNumber = 1,
  };
  // .SatelliteEarthSimulation.SimResponse.Frame.Geo geo = 2;
  bool has_geo() const;
  private:
  bool _internal_has_geo() const;
  public:
  void clear_geo();
  const ::SatelliteEarthSimulation::SimResponse_Frame_Geo& geo() const;
  PROTOBUF_NODISCARD ::SatelliteEarthSimulation::SimResponse_Frame_Geo* release_geo();
  ::SatelliteEarthSimulation::SimResponse_Frame_Geo* mutable_geo();
  void set_allocated_geo(::SatelliteEarthSimulation::SimResponse_Frame_Geo* geo);
  private:
  const ::SatelliteEarthSimulation::SimResponse_Frame_Geo& _internal_geo() const;
  ::SatelliteEarthSimulation::SimResponse_Frame_Geo* _internal_mutable_geo();
  public:
  void unsafe_arena_set_allocated_geo(
      ::SatelliteEarthSimulation::SimResponse_Frame_Geo* geo);
  ::SatelliteEarthSimulation::SimResponse_Frame_Geo* unsafe_arena_release_geo();

  // .SatelliteEarthSimulation.SimResponse.Frame.Mag mag = 3;
  bool has_mag() const;
  private:
  bool _internal_has_mag() const;
  public:
  void clear_mag();
  const ::SatelliteEarthSimulation::SimResponse_Frame_Mag& mag() const;
  PROTOBUF_NODISCARD ::SatelliteEarthSimulation::SimResponse_Frame_Mag* release_mag();
  ::SatelliteEarthSimulation::SimResponse_Frame_Mag* mutable_mag();
  void set_allocated_mag(::SatelliteEarthSimulation::SimResponse_Frame_Mag* mag);
  private:
  const ::SatelliteEarthSimulation::SimResponse_Frame_Mag& _internal_mag() const;
  ::SatelliteEarthSimulation::SimResponse_Frame_Mag* _internal_mutable_mag();
  public:
  void unsafe_arena_set_allocated_mag(
      ::SatelliteEarthSimulation::SimResponse_Frame_Mag* mag);
  ::SatelliteEarthSimulation::SimResponse_Frame_Mag* unsafe_arena_release_mag();

  // double t_rel_s = 1;
  void clear_t_rel_s();
  double t_rel_s() const;
  void set_t_rel_s(double value);
  private:
  double _internal_t_rel_s() const;
  void _internal_set_t_rel_s(double value);
  public:

  // @@protoc_insertion_point(class_scope:SatelliteEarthSimulation.SimResponse.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::SatelliteEarthSimulation::SimResponse_Frame_Geo* geo_;
    ::SatelliteEarthSimulation::SimResponse_Frame_Mag* mag_;
    double t_rel_s_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_satellite_5fEarth_5fsimulation_2eproto;
};
// -------------------------------------------------------------------

class SimResponse_Decay_TLEForward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SatelliteEarthSimulation.SimResponse.Decay.TLEForward) */ {
 public:
  inline SimResponse_Decay_TLEForward() : SimResponse_Decay_TLEForward(nullptr) {}
  ~SimResponse_Decay_TLEForward() override;
  explicit PROTOBUF_CONSTEXPR SimResponse_Decay_TLEForward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimResponse_Decay_TLEForward(const SimResponse_Decay_TLEForward& from);
  SimResponse_Decay_TLEForward(SimResponse_Decay_TLEForward&& from) noexcept
    : SimResponse_Decay_TLEForward() {
    *this = ::std::move(from);
  }

  inline SimResponse_Decay_TLEForward& operator=(const SimResponse_Decay_TLEForward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimResponse_Decay_TLEForward& operator=(SimResponse_Decay_TLEForward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimResponse_Decay_TLEForward& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimResponse_Decay_TLEForward* internal_default_instance() {
    return reinterpret_cast<const SimResponse_Decay_TLEForward*>(
               &_SimResponse_Decay_TLEForward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SimResponse_Decay_TLEForward& a, SimResponse_Decay_TLEForward& b) {
    a.Swap(&b);
  }
  inline void Swap(SimResponse_Decay_TLEForward* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimResponse_Decay_TLEForward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimResponse_Decay_TLEForward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimResponse_Decay_TLEForward>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimResponse_Decay_TLEForward& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimResponse_Decay_TLEForward& from) {
    SimResponse_Decay_TLEForward::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimResponse_Decay_TLEForward* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SatelliteEarthSimulation.SimResponse.Decay.TLEForward";
  }
  protected:
  explicit SimResponse_Decay_TLEForward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeUtcFieldNumber = 2,
    kTimeFromStartSFieldNumber = 3,
    kUncertaintySFieldNumber = 4,
    kCrossedFieldNumber = 1,
  };
  // string time_utc = 2;
  void clear_time_utc();
  const std::string& time_utc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_utc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_utc();
  PROTOBUF_NODISCARD std::string* release_time_utc();
  void set_allocated_time_utc(std::string* time_utc);
  private:
  const std::string& _internal_time_utc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_utc(const std::string& value);
  std::string* _internal_mutable_time_utc();
  public:

  // double time_from_start_s = 3;
  void clear_time_from_start_s();
  double time_from_start_s() const;
  void set_time_from_start_s(double value);
  private:
  double _internal_time_from_start_s() const;
  void _internal_set_time_from_start_s(double value);
  public:

  // double uncertainty_s = 4;
  void clear_uncertainty_s();
  double uncertainty_s() const;
  void set_uncertainty_s(double value);
  private:
  double _internal_uncertainty_s() const;
  void _internal_set_uncertainty_s(double value);
  public:

  // bool crossed = 1;
  void clear_crossed();
  bool crossed() const;
  void set_crossed(bool value);
  private:
  bool _internal_crossed() const;
  void _internal_set_crossed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SatelliteEarthSimulation.SimResponse.Decay.TLEForward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_utc_;
    double time_from_start_s_;
    double uncertainty_s_;
    bool crossed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_satellite_5fEarth_5fsimulation_2eproto;
};
// -------------------------------------------------------------------

class SimResponse_Decay_PhysicsDrag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SatelliteEarthSimulation.SimResponse.Decay.PhysicsDrag) */ {
 public:
  inline SimResponse_Decay_PhysicsDrag() : SimResponse_Decay_PhysicsDrag(nullptr) {}
  ~SimResponse_Decay_PhysicsDrag() override;
  explicit PROTOBUF_CONSTEXPR SimResponse_Decay_PhysicsDrag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimResponse_Decay_PhysicsDrag(const SimResponse_Decay_PhysicsDrag& from);
  SimResponse_Decay_PhysicsDrag(SimResponse_Decay_PhysicsDrag&& from) noexcept
    : SimResponse_Decay_PhysicsDrag() {
    *this = ::std::move(from);
  }

  inline SimResponse_Decay_PhysicsDrag& operator=(const SimResponse_Decay_PhysicsDrag& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimResponse_Decay_PhysicsDrag& operator=(SimResponse_Decay_PhysicsDrag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimResponse_Decay_PhysicsDrag& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimResponse_Decay_PhysicsDrag* internal_default_instance() {
    return reinterpret_cast<const SimResponse_Decay_PhysicsDrag*>(
               &_SimResponse_Decay_PhysicsDrag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SimResponse_Decay_PhysicsDrag& a, SimResponse_Decay_PhysicsDrag& b) {
    a.Swap(&b);
  }
  inline void Swap(SimResponse_Decay_PhysicsDrag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimResponse_Decay_PhysicsDrag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimResponse_Decay_PhysicsDrag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimResponse_Decay_PhysicsDrag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimResponse_Decay_PhysicsDrag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimResponse_Decay_PhysicsDrag& from) {
    SimResponse_Decay_PhysicsDrag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimResponse_Decay_PhysicsDrag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SatelliteEarthSimulation.SimResponse.Decay.PhysicsDrag";
  }
  protected:
  explicit SimResponse_Decay_PhysicsDrag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeUtcFieldNumber = 2,
    kTimeFromStartSFieldNumber = 3,
    kUncertaintySFieldNumber = 4,
    kCrossedFieldNumber = 1,
  };
  // string time_utc = 2;
  void clear_time_utc();
  const std::string& time_utc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_utc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_utc();
  PROTOBUF_NODISCARD std::string* release_time_utc();
  void set_allocated_time_utc(std::string* time_utc);
  private:
  const std::string& _internal_time_utc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_utc(const std::string& value);
  std::string* _internal_mutable_time_utc();
  public:

  // double time_from_start_s = 3;
  void clear_time_from_start_s();
  double time_from_start_s() const;
  void set_time_from_start_s(double value);
  private:
  double _internal_time_from_start_s() const;
  void _internal_set_time_from_start_s(double value);
  public:

  // double uncertainty_s = 4;
  void clear_uncertainty_s();
  double uncertainty_s() const;
  void set_uncertainty_s(double value);
  private:
  double _internal_uncertainty_s() const;
  void _internal_set_uncertainty_s(double value);
  public:

  // bool crossed = 1;
  void clear_crossed();
  bool crossed() const;
  void set_crossed(bool value);
  private:
  bool _internal_crossed() const;
  void _internal_set_crossed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SatelliteEarthSimulation.SimResponse.Decay.PhysicsDrag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_utc_;
    double time_from_start_s_;
    double uncertainty_s_;
    bool crossed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_satellite_5fEarth_5fsimulation_2eproto;
};
// -------------------------------------------------------------------

class SimResponse_Decay final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SatelliteEarthSimulation.SimResponse.Decay) */ {
 public:
  inline SimResponse_Decay() : SimResponse_Decay(nullptr) {}
  ~SimResponse_Decay() override;
  explicit PROTOBUF_CONSTEXPR SimResponse_Decay(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimResponse_Decay(const SimResponse_Decay& from);
  SimResponse_Decay(SimResponse_Decay&& from) noexcept
    : SimResponse_Decay() {
    *this = ::std::move(from);
  }

  inline SimResponse_Decay& operator=(const SimResponse_Decay& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimResponse_Decay& operator=(SimResponse_Decay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimResponse_Decay& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimResponse_Decay* internal_default_instance() {
    return reinterpret_cast<const SimResponse_Decay*>(
               &_SimResponse_Decay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SimResponse_Decay& a, SimResponse_Decay& b) {
    a.Swap(&b);
  }
  inline void Swap(SimResponse_Decay* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimResponse_Decay* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimResponse_Decay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimResponse_Decay>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimResponse_Decay& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimResponse_Decay& from) {
    SimResponse_Decay::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimResponse_Decay* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SatelliteEarthSimulation.SimResponse.Decay";
  }
  protected:
  explicit SimResponse_Decay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SimResponse_Decay_TLEForward TLEForward;
  typedef SimResponse_Decay_PhysicsDrag PhysicsDrag;

  // accessors -------------------------------------------------------

  enum : int {
    kTleForwardFieldNumber = 2,
    kPhysicsDragFieldNumber = 3,
    kThresholdKmFieldNumber = 1,
  };
  // .SatelliteEarthSimulation.SimResponse.Decay.TLEForward tle_forward = 2;
  bool has_tle_forward() const;
  private:
  bool _internal_has_tle_forward() const;
  public:
  void clear_tle_forward();
  const ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward& tle_forward() const;
  PROTOBUF_NODISCARD ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward* release_tle_forward();
  ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward* mutable_tle_forward();
  void set_allocated_tle_forward(::SatelliteEarthSimulation::SimResponse_Decay_TLEForward* tle_forward);
  private:
  const ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward& _internal_tle_forward() const;
  ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward* _internal_mutable_tle_forward();
  public:
  void unsafe_arena_set_allocated_tle_forward(
      ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward* tle_forward);
  ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward* unsafe_arena_release_tle_forward();

  // .SatelliteEarthSimulation.SimResponse.Decay.PhysicsDrag physics_drag = 3;
  bool has_physics_drag() const;
  private:
  bool _internal_has_physics_drag() const;
  public:
  void clear_physics_drag();
  const ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag& physics_drag() const;
  PROTOBUF_NODISCARD ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag* release_physics_drag();
  ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag* mutable_physics_drag();
  void set_allocated_physics_drag(::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag* physics_drag);
  private:
  const ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag& _internal_physics_drag() const;
  ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag* _internal_mutable_physics_drag();
  public:
  void unsafe_arena_set_allocated_physics_drag(
      ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag* physics_drag);
  ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag* unsafe_arena_release_physics_drag();

  // double threshold_km = 1;
  void clear_threshold_km();
  double threshold_km() const;
  void set_threshold_km(double value);
  private:
  double _internal_threshold_km() const;
  void _internal_set_threshold_km(double value);
  public:

  // @@protoc_insertion_point(class_scope:SatelliteEarthSimulation.SimResponse.Decay)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward* tle_forward_;
    ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag* physics_drag_;
    double threshold_km_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_satellite_5fEarth_5fsimulation_2eproto;
};
// -------------------------------------------------------------------

class SimResponse_Meta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SatelliteEarthSimulation.SimResponse.Meta) */ {
 public:
  inline SimResponse_Meta() : SimResponse_Meta(nullptr) {}
  ~SimResponse_Meta() override;
  explicit PROTOBUF_CONSTEXPR SimResponse_Meta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimResponse_Meta(const SimResponse_Meta& from);
  SimResponse_Meta(SimResponse_Meta&& from) noexcept
    : SimResponse_Meta() {
    *this = ::std::move(from);
  }

  inline SimResponse_Meta& operator=(const SimResponse_Meta& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimResponse_Meta& operator=(SimResponse_Meta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimResponse_Meta& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimResponse_Meta* internal_default_instance() {
    return reinterpret_cast<const SimResponse_Meta*>(
               &_SimResponse_Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SimResponse_Meta& a, SimResponse_Meta& b) {
    a.Swap(&b);
  }
  inline void Swap(SimResponse_Meta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimResponse_Meta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimResponse_Meta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimResponse_Meta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimResponse_Meta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimResponse_Meta& from) {
    SimResponse_Meta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimResponse_Meta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SatelliteEarthSimulation.SimResponse.Meta";
  }
  protected:
  explicit SimResponse_Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTleEpochUtcFieldNumber = 4,
    kPointsGeneratedFieldNumber = 2,
    kOutOfTleEpochWindowFieldNumber = 5,
  };
  // string tle_epoch_utc = 4;
  void clear_tle_epoch_utc();
  const std::string& tle_epoch_utc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tle_epoch_utc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tle_epoch_utc();
  PROTOBUF_NODISCARD std::string* release_tle_epoch_utc();
  void set_allocated_tle_epoch_utc(std::string* tle_epoch_utc);
  private:
  const std::string& _internal_tle_epoch_utc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tle_epoch_utc(const std::string& value);
  std::string* _internal_mutable_tle_epoch_utc();
  public:

  // uint32 points_generated = 2;
  void clear_points_generated();
  uint32_t points_generated() const;
  void set_points_generated(uint32_t value);
  private:
  uint32_t _internal_points_generated() const;
  void _internal_set_points_generated(uint32_t value);
  public:

  // bool out_of_tle_epoch_window = 5;
  void clear_out_of_tle_epoch_window();
  bool out_of_tle_epoch_window() const;
  void set_out_of_tle_epoch_window(bool value);
  private:
  bool _internal_out_of_tle_epoch_window() const;
  void _internal_set_out_of_tle_epoch_window(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SatelliteEarthSimulation.SimResponse.Meta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tle_epoch_utc_;
    uint32_t points_generated_;
    bool out_of_tle_epoch_window_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_satellite_5fEarth_5fsimulation_2eproto;
};
// -------------------------------------------------------------------

class SimResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SatelliteEarthSimulation.SimResponse) */ {
 public:
  inline SimResponse() : SimResponse(nullptr) {}
  ~SimResponse() override;
  explicit PROTOBUF_CONSTEXPR SimResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimResponse(const SimResponse& from);
  SimResponse(SimResponse&& from) noexcept
    : SimResponse() {
    *this = ::std::move(from);
  }

  inline SimResponse& operator=(const SimResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimResponse& operator=(SimResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimResponse* internal_default_instance() {
    return reinterpret_cast<const SimResponse*>(
               &_SimResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SimResponse& a, SimResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SimResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimResponse& from) {
    SimResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SatelliteEarthSimulation.SimResponse";
  }
  protected:
  explicit SimResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SimResponse_Frame Frame;
  typedef SimResponse_Decay Decay;
  typedef SimResponse_Meta Meta;

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 1,
    kDecayFieldNumber = 2,
    kMetaFieldNumber = 3,
  };
  // repeated .SatelliteEarthSimulation.SimResponse.Frame frames = 1;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::SatelliteEarthSimulation::SimResponse_Frame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SatelliteEarthSimulation::SimResponse_Frame >*
      mutable_frames();
  private:
  const ::SatelliteEarthSimulation::SimResponse_Frame& _internal_frames(int index) const;
  ::SatelliteEarthSimulation::SimResponse_Frame* _internal_add_frames();
  public:
  const ::SatelliteEarthSimulation::SimResponse_Frame& frames(int index) const;
  ::SatelliteEarthSimulation::SimResponse_Frame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SatelliteEarthSimulation::SimResponse_Frame >&
      frames() const;

  // .SatelliteEarthSimulation.SimResponse.Decay decay = 2;
  bool has_decay() const;
  private:
  bool _internal_has_decay() const;
  public:
  void clear_decay();
  const ::SatelliteEarthSimulation::SimResponse_Decay& decay() const;
  PROTOBUF_NODISCARD ::SatelliteEarthSimulation::SimResponse_Decay* release_decay();
  ::SatelliteEarthSimulation::SimResponse_Decay* mutable_decay();
  void set_allocated_decay(::SatelliteEarthSimulation::SimResponse_Decay* decay);
  private:
  const ::SatelliteEarthSimulation::SimResponse_Decay& _internal_decay() const;
  ::SatelliteEarthSimulation::SimResponse_Decay* _internal_mutable_decay();
  public:
  void unsafe_arena_set_allocated_decay(
      ::SatelliteEarthSimulation::SimResponse_Decay* decay);
  ::SatelliteEarthSimulation::SimResponse_Decay* unsafe_arena_release_decay();

  // .SatelliteEarthSimulation.SimResponse.Meta meta = 3;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::SatelliteEarthSimulation::SimResponse_Meta& meta() const;
  PROTOBUF_NODISCARD ::SatelliteEarthSimulation::SimResponse_Meta* release_meta();
  ::SatelliteEarthSimulation::SimResponse_Meta* mutable_meta();
  void set_allocated_meta(::SatelliteEarthSimulation::SimResponse_Meta* meta);
  private:
  const ::SatelliteEarthSimulation::SimResponse_Meta& _internal_meta() const;
  ::SatelliteEarthSimulation::SimResponse_Meta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::SatelliteEarthSimulation::SimResponse_Meta* meta);
  ::SatelliteEarthSimulation::SimResponse_Meta* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:SatelliteEarthSimulation.SimResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SatelliteEarthSimulation::SimResponse_Frame > frames_;
    ::SatelliteEarthSimulation::SimResponse_Decay* decay_;
    ::SatelliteEarthSimulation::SimResponse_Meta* meta_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_satellite_5fEarth_5fsimulation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimRequest_TLE

// string title = 1;
inline void SimRequest_TLE::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& SimRequest_TLE::title() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimRequest.TLE.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimRequest_TLE::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimRequest.TLE.title)
}
inline std::string* SimRequest_TLE::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:SatelliteEarthSimulation.SimRequest.TLE.title)
  return _s;
}
inline const std::string& SimRequest_TLE::_internal_title() const {
  return _impl_.title_.Get();
}
inline void SimRequest_TLE::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* SimRequest_TLE::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* SimRequest_TLE::release_title() {
  // @@protoc_insertion_point(field_release:SatelliteEarthSimulation.SimRequest.TLE.title)
  return _impl_.title_.Release();
}
inline void SimRequest_TLE::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SatelliteEarthSimulation.SimRequest.TLE.title)
}

// string line1 = 2;
inline void SimRequest_TLE::clear_line1() {
  _impl_.line1_.ClearToEmpty();
}
inline const std::string& SimRequest_TLE::line1() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimRequest.TLE.line1)
  return _internal_line1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimRequest_TLE::set_line1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.line1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimRequest.TLE.line1)
}
inline std::string* SimRequest_TLE::mutable_line1() {
  std::string* _s = _internal_mutable_line1();
  // @@protoc_insertion_point(field_mutable:SatelliteEarthSimulation.SimRequest.TLE.line1)
  return _s;
}
inline const std::string& SimRequest_TLE::_internal_line1() const {
  return _impl_.line1_.Get();
}
inline void SimRequest_TLE::_internal_set_line1(const std::string& value) {
  
  _impl_.line1_.Set(value, GetArenaForAllocation());
}
inline std::string* SimRequest_TLE::_internal_mutable_line1() {
  
  return _impl_.line1_.Mutable(GetArenaForAllocation());
}
inline std::string* SimRequest_TLE::release_line1() {
  // @@protoc_insertion_point(field_release:SatelliteEarthSimulation.SimRequest.TLE.line1)
  return _impl_.line1_.Release();
}
inline void SimRequest_TLE::set_allocated_line1(std::string* line1) {
  if (line1 != nullptr) {
    
  } else {
    
  }
  _impl_.line1_.SetAllocated(line1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.line1_.IsDefault()) {
    _impl_.line1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SatelliteEarthSimulation.SimRequest.TLE.line1)
}

// string line2 = 3;
inline void SimRequest_TLE::clear_line2() {
  _impl_.line2_.ClearToEmpty();
}
inline const std::string& SimRequest_TLE::line2() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimRequest.TLE.line2)
  return _internal_line2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimRequest_TLE::set_line2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.line2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimRequest.TLE.line2)
}
inline std::string* SimRequest_TLE::mutable_line2() {
  std::string* _s = _internal_mutable_line2();
  // @@protoc_insertion_point(field_mutable:SatelliteEarthSimulation.SimRequest.TLE.line2)
  return _s;
}
inline const std::string& SimRequest_TLE::_internal_line2() const {
  return _impl_.line2_.Get();
}
inline void SimRequest_TLE::_internal_set_line2(const std::string& value) {
  
  _impl_.line2_.Set(value, GetArenaForAllocation());
}
inline std::string* SimRequest_TLE::_internal_mutable_line2() {
  
  return _impl_.line2_.Mutable(GetArenaForAllocation());
}
inline std::string* SimRequest_TLE::release_line2() {
  // @@protoc_insertion_point(field_release:SatelliteEarthSimulation.SimRequest.TLE.line2)
  return _impl_.line2_.Release();
}
inline void SimRequest_TLE::set_allocated_line2(std::string* line2) {
  if (line2 != nullptr) {
    
  } else {
    
  }
  _impl_.line2_.SetAllocated(line2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.line2_.IsDefault()) {
    _impl_.line2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SatelliteEarthSimulation.SimRequest.TLE.line2)
}

// -------------------------------------------------------------------

// SimRequest

// .SatelliteEarthSimulation.SimRequest.TLE tle = 1;
inline bool SimRequest::_internal_has_tle() const {
  return this != internal_default_instance() && _impl_.tle_ != nullptr;
}
inline bool SimRequest::has_tle() const {
  return _internal_has_tle();
}
inline void SimRequest::clear_tle() {
  if (GetArenaForAllocation() == nullptr && _impl_.tle_ != nullptr) {
    delete _impl_.tle_;
  }
  _impl_.tle_ = nullptr;
}
inline const ::SatelliteEarthSimulation::SimRequest_TLE& SimRequest::_internal_tle() const {
  const ::SatelliteEarthSimulation::SimRequest_TLE* p = _impl_.tle_;
  return p != nullptr ? *p : reinterpret_cast<const ::SatelliteEarthSimulation::SimRequest_TLE&>(
      ::SatelliteEarthSimulation::_SimRequest_TLE_default_instance_);
}
inline const ::SatelliteEarthSimulation::SimRequest_TLE& SimRequest::tle() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimRequest.tle)
  return _internal_tle();
}
inline void SimRequest::unsafe_arena_set_allocated_tle(
    ::SatelliteEarthSimulation::SimRequest_TLE* tle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tle_);
  }
  _impl_.tle_ = tle;
  if (tle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SatelliteEarthSimulation.SimRequest.tle)
}
inline ::SatelliteEarthSimulation::SimRequest_TLE* SimRequest::release_tle() {
  
  ::SatelliteEarthSimulation::SimRequest_TLE* temp = _impl_.tle_;
  _impl_.tle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SatelliteEarthSimulation::SimRequest_TLE* SimRequest::unsafe_arena_release_tle() {
  // @@protoc_insertion_point(field_release:SatelliteEarthSimulation.SimRequest.tle)
  
  ::SatelliteEarthSimulation::SimRequest_TLE* temp = _impl_.tle_;
  _impl_.tle_ = nullptr;
  return temp;
}
inline ::SatelliteEarthSimulation::SimRequest_TLE* SimRequest::_internal_mutable_tle() {
  
  if (_impl_.tle_ == nullptr) {
    auto* p = CreateMaybeMessage<::SatelliteEarthSimulation::SimRequest_TLE>(GetArenaForAllocation());
    _impl_.tle_ = p;
  }
  return _impl_.tle_;
}
inline ::SatelliteEarthSimulation::SimRequest_TLE* SimRequest::mutable_tle() {
  ::SatelliteEarthSimulation::SimRequest_TLE* _msg = _internal_mutable_tle();
  // @@protoc_insertion_point(field_mutable:SatelliteEarthSimulation.SimRequest.tle)
  return _msg;
}
inline void SimRequest::set_allocated_tle(::SatelliteEarthSimulation::SimRequest_TLE* tle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tle_;
  }
  if (tle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tle);
    if (message_arena != submessage_arena) {
      tle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tle_ = tle;
  // @@protoc_insertion_point(field_set_allocated:SatelliteEarthSimulation.SimRequest.tle)
}

// uint64 start_epoch_ms = 2;
inline void SimRequest::clear_start_epoch_ms() {
  _impl_.start_epoch_ms_ = uint64_t{0u};
}
inline uint64_t SimRequest::_internal_start_epoch_ms() const {
  return _impl_.start_epoch_ms_;
}
inline uint64_t SimRequest::start_epoch_ms() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimRequest.start_epoch_ms)
  return _internal_start_epoch_ms();
}
inline void SimRequest::_internal_set_start_epoch_ms(uint64_t value) {
  
  _impl_.start_epoch_ms_ = value;
}
inline void SimRequest::set_start_epoch_ms(uint64_t value) {
  _internal_set_start_epoch_ms(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimRequest.start_epoch_ms)
}

// double duration_s = 3;
inline void SimRequest::clear_duration_s() {
  _impl_.duration_s_ = 0;
}
inline double SimRequest::_internal_duration_s() const {
  return _impl_.duration_s_;
}
inline double SimRequest::duration_s() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimRequest.duration_s)
  return _internal_duration_s();
}
inline void SimRequest::_internal_set_duration_s(double value) {
  
  _impl_.duration_s_ = value;
}
inline void SimRequest::set_duration_s(double value) {
  _internal_set_duration_s(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimRequest.duration_s)
}

// double step_s = 4;
inline void SimRequest::clear_step_s() {
  _impl_.step_s_ = 0;
}
inline double SimRequest::_internal_step_s() const {
  return _impl_.step_s_;
}
inline double SimRequest::step_s() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimRequest.step_s)
  return _internal_step_s();
}
inline void SimRequest::_internal_set_step_s(double value) {
  
  _impl_.step_s_ = value;
}
inline void SimRequest::set_step_s(double value) {
  _internal_set_step_s(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimRequest.step_s)
}

// double h_fail_km = 5;
inline void SimRequest::clear_h_fail_km() {
  _impl_.h_fail_km_ = 0;
}
inline double SimRequest::_internal_h_fail_km() const {
  return _impl_.h_fail_km_;
}
inline double SimRequest::h_fail_km() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimRequest.h_fail_km)
  return _internal_h_fail_km();
}
inline void SimRequest::_internal_set_h_fail_km(double value) {
  
  _impl_.h_fail_km_ = value;
}
inline void SimRequest::set_h_fail_km(double value) {
  _internal_set_h_fail_km(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimRequest.h_fail_km)
}

// -------------------------------------------------------------------

// SimResponse_Frame_Geo

// double lat_deg = 1;
inline void SimResponse_Frame_Geo::clear_lat_deg() {
  _impl_.lat_deg_ = 0;
}
inline double SimResponse_Frame_Geo::_internal_lat_deg() const {
  return _impl_.lat_deg_;
}
inline double SimResponse_Frame_Geo::lat_deg() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Frame.Geo.lat_deg)
  return _internal_lat_deg();
}
inline void SimResponse_Frame_Geo::_internal_set_lat_deg(double value) {
  
  _impl_.lat_deg_ = value;
}
inline void SimResponse_Frame_Geo::set_lat_deg(double value) {
  _internal_set_lat_deg(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimResponse.Frame.Geo.lat_deg)
}

// double lon_deg = 2;
inline void SimResponse_Frame_Geo::clear_lon_deg() {
  _impl_.lon_deg_ = 0;
}
inline double SimResponse_Frame_Geo::_internal_lon_deg() const {
  return _impl_.lon_deg_;
}
inline double SimResponse_Frame_Geo::lon_deg() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Frame.Geo.lon_deg)
  return _internal_lon_deg();
}
inline void SimResponse_Frame_Geo::_internal_set_lon_deg(double value) {
  
  _impl_.lon_deg_ = value;
}
inline void SimResponse_Frame_Geo::set_lon_deg(double value) {
  _internal_set_lon_deg(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimResponse.Frame.Geo.lon_deg)
}

// double alt_km = 3;
inline void SimResponse_Frame_Geo::clear_alt_km() {
  _impl_.alt_km_ = 0;
}
inline double SimResponse_Frame_Geo::_internal_alt_km() const {
  return _impl_.alt_km_;
}
inline double SimResponse_Frame_Geo::alt_km() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Frame.Geo.alt_km)
  return _internal_alt_km();
}
inline void SimResponse_Frame_Geo::_internal_set_alt_km(double value) {
  
  _impl_.alt_km_ = value;
}
inline void SimResponse_Frame_Geo::set_alt_km(double value) {
  _internal_set_alt_km(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimResponse.Frame.Geo.alt_km)
}

// -------------------------------------------------------------------

// SimResponse_Frame_Mag

// double x_nT = 1;
inline void SimResponse_Frame_Mag::clear_x_nt() {
  _impl_.x_nt_ = 0;
}
inline double SimResponse_Frame_Mag::_internal_x_nt() const {
  return _impl_.x_nt_;
}
inline double SimResponse_Frame_Mag::x_nt() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Frame.Mag.x_nT)
  return _internal_x_nt();
}
inline void SimResponse_Frame_Mag::_internal_set_x_nt(double value) {
  
  _impl_.x_nt_ = value;
}
inline void SimResponse_Frame_Mag::set_x_nt(double value) {
  _internal_set_x_nt(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimResponse.Frame.Mag.x_nT)
}

// double y_nT = 2;
inline void SimResponse_Frame_Mag::clear_y_nt() {
  _impl_.y_nt_ = 0;
}
inline double SimResponse_Frame_Mag::_internal_y_nt() const {
  return _impl_.y_nt_;
}
inline double SimResponse_Frame_Mag::y_nt() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Frame.Mag.y_nT)
  return _internal_y_nt();
}
inline void SimResponse_Frame_Mag::_internal_set_y_nt(double value) {
  
  _impl_.y_nt_ = value;
}
inline void SimResponse_Frame_Mag::set_y_nt(double value) {
  _internal_set_y_nt(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimResponse.Frame.Mag.y_nT)
}

// double z_nT = 3;
inline void SimResponse_Frame_Mag::clear_z_nt() {
  _impl_.z_nt_ = 0;
}
inline double SimResponse_Frame_Mag::_internal_z_nt() const {
  return _impl_.z_nt_;
}
inline double SimResponse_Frame_Mag::z_nt() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Frame.Mag.z_nT)
  return _internal_z_nt();
}
inline void SimResponse_Frame_Mag::_internal_set_z_nt(double value) {
  
  _impl_.z_nt_ = value;
}
inline void SimResponse_Frame_Mag::set_z_nt(double value) {
  _internal_set_z_nt(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimResponse.Frame.Mag.z_nT)
}

// double f_nT = 4;
inline void SimResponse_Frame_Mag::clear_f_nt() {
  _impl_.f_nt_ = 0;
}
inline double SimResponse_Frame_Mag::_internal_f_nt() const {
  return _impl_.f_nt_;
}
inline double SimResponse_Frame_Mag::f_nt() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Frame.Mag.f_nT)
  return _internal_f_nt();
}
inline void SimResponse_Frame_Mag::_internal_set_f_nt(double value) {
  
  _impl_.f_nt_ = value;
}
inline void SimResponse_Frame_Mag::set_f_nt(double value) {
  _internal_set_f_nt(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimResponse.Frame.Mag.f_nT)
}

// -------------------------------------------------------------------

// SimResponse_Frame

// double t_rel_s = 1;
inline void SimResponse_Frame::clear_t_rel_s() {
  _impl_.t_rel_s_ = 0;
}
inline double SimResponse_Frame::_internal_t_rel_s() const {
  return _impl_.t_rel_s_;
}
inline double SimResponse_Frame::t_rel_s() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Frame.t_rel_s)
  return _internal_t_rel_s();
}
inline void SimResponse_Frame::_internal_set_t_rel_s(double value) {
  
  _impl_.t_rel_s_ = value;
}
inline void SimResponse_Frame::set_t_rel_s(double value) {
  _internal_set_t_rel_s(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimResponse.Frame.t_rel_s)
}

// .SatelliteEarthSimulation.SimResponse.Frame.Geo geo = 2;
inline bool SimResponse_Frame::_internal_has_geo() const {
  return this != internal_default_instance() && _impl_.geo_ != nullptr;
}
inline bool SimResponse_Frame::has_geo() const {
  return _internal_has_geo();
}
inline void SimResponse_Frame::clear_geo() {
  if (GetArenaForAllocation() == nullptr && _impl_.geo_ != nullptr) {
    delete _impl_.geo_;
  }
  _impl_.geo_ = nullptr;
}
inline const ::SatelliteEarthSimulation::SimResponse_Frame_Geo& SimResponse_Frame::_internal_geo() const {
  const ::SatelliteEarthSimulation::SimResponse_Frame_Geo* p = _impl_.geo_;
  return p != nullptr ? *p : reinterpret_cast<const ::SatelliteEarthSimulation::SimResponse_Frame_Geo&>(
      ::SatelliteEarthSimulation::_SimResponse_Frame_Geo_default_instance_);
}
inline const ::SatelliteEarthSimulation::SimResponse_Frame_Geo& SimResponse_Frame::geo() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Frame.geo)
  return _internal_geo();
}
inline void SimResponse_Frame::unsafe_arena_set_allocated_geo(
    ::SatelliteEarthSimulation::SimResponse_Frame_Geo* geo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.geo_);
  }
  _impl_.geo_ = geo;
  if (geo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SatelliteEarthSimulation.SimResponse.Frame.geo)
}
inline ::SatelliteEarthSimulation::SimResponse_Frame_Geo* SimResponse_Frame::release_geo() {
  
  ::SatelliteEarthSimulation::SimResponse_Frame_Geo* temp = _impl_.geo_;
  _impl_.geo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SatelliteEarthSimulation::SimResponse_Frame_Geo* SimResponse_Frame::unsafe_arena_release_geo() {
  // @@protoc_insertion_point(field_release:SatelliteEarthSimulation.SimResponse.Frame.geo)
  
  ::SatelliteEarthSimulation::SimResponse_Frame_Geo* temp = _impl_.geo_;
  _impl_.geo_ = nullptr;
  return temp;
}
inline ::SatelliteEarthSimulation::SimResponse_Frame_Geo* SimResponse_Frame::_internal_mutable_geo() {
  
  if (_impl_.geo_ == nullptr) {
    auto* p = CreateMaybeMessage<::SatelliteEarthSimulation::SimResponse_Frame_Geo>(GetArenaForAllocation());
    _impl_.geo_ = p;
  }
  return _impl_.geo_;
}
inline ::SatelliteEarthSimulation::SimResponse_Frame_Geo* SimResponse_Frame::mutable_geo() {
  ::SatelliteEarthSimulation::SimResponse_Frame_Geo* _msg = _internal_mutable_geo();
  // @@protoc_insertion_point(field_mutable:SatelliteEarthSimulation.SimResponse.Frame.geo)
  return _msg;
}
inline void SimResponse_Frame::set_allocated_geo(::SatelliteEarthSimulation::SimResponse_Frame_Geo* geo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.geo_;
  }
  if (geo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(geo);
    if (message_arena != submessage_arena) {
      geo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.geo_ = geo;
  // @@protoc_insertion_point(field_set_allocated:SatelliteEarthSimulation.SimResponse.Frame.geo)
}

// .SatelliteEarthSimulation.SimResponse.Frame.Mag mag = 3;
inline bool SimResponse_Frame::_internal_has_mag() const {
  return this != internal_default_instance() && _impl_.mag_ != nullptr;
}
inline bool SimResponse_Frame::has_mag() const {
  return _internal_has_mag();
}
inline void SimResponse_Frame::clear_mag() {
  if (GetArenaForAllocation() == nullptr && _impl_.mag_ != nullptr) {
    delete _impl_.mag_;
  }
  _impl_.mag_ = nullptr;
}
inline const ::SatelliteEarthSimulation::SimResponse_Frame_Mag& SimResponse_Frame::_internal_mag() const {
  const ::SatelliteEarthSimulation::SimResponse_Frame_Mag* p = _impl_.mag_;
  return p != nullptr ? *p : reinterpret_cast<const ::SatelliteEarthSimulation::SimResponse_Frame_Mag&>(
      ::SatelliteEarthSimulation::_SimResponse_Frame_Mag_default_instance_);
}
inline const ::SatelliteEarthSimulation::SimResponse_Frame_Mag& SimResponse_Frame::mag() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Frame.mag)
  return _internal_mag();
}
inline void SimResponse_Frame::unsafe_arena_set_allocated_mag(
    ::SatelliteEarthSimulation::SimResponse_Frame_Mag* mag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mag_);
  }
  _impl_.mag_ = mag;
  if (mag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SatelliteEarthSimulation.SimResponse.Frame.mag)
}
inline ::SatelliteEarthSimulation::SimResponse_Frame_Mag* SimResponse_Frame::release_mag() {
  
  ::SatelliteEarthSimulation::SimResponse_Frame_Mag* temp = _impl_.mag_;
  _impl_.mag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SatelliteEarthSimulation::SimResponse_Frame_Mag* SimResponse_Frame::unsafe_arena_release_mag() {
  // @@protoc_insertion_point(field_release:SatelliteEarthSimulation.SimResponse.Frame.mag)
  
  ::SatelliteEarthSimulation::SimResponse_Frame_Mag* temp = _impl_.mag_;
  _impl_.mag_ = nullptr;
  return temp;
}
inline ::SatelliteEarthSimulation::SimResponse_Frame_Mag* SimResponse_Frame::_internal_mutable_mag() {
  
  if (_impl_.mag_ == nullptr) {
    auto* p = CreateMaybeMessage<::SatelliteEarthSimulation::SimResponse_Frame_Mag>(GetArenaForAllocation());
    _impl_.mag_ = p;
  }
  return _impl_.mag_;
}
inline ::SatelliteEarthSimulation::SimResponse_Frame_Mag* SimResponse_Frame::mutable_mag() {
  ::SatelliteEarthSimulation::SimResponse_Frame_Mag* _msg = _internal_mutable_mag();
  // @@protoc_insertion_point(field_mutable:SatelliteEarthSimulation.SimResponse.Frame.mag)
  return _msg;
}
inline void SimResponse_Frame::set_allocated_mag(::SatelliteEarthSimulation::SimResponse_Frame_Mag* mag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mag_;
  }
  if (mag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mag);
    if (message_arena != submessage_arena) {
      mag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mag, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mag_ = mag;
  // @@protoc_insertion_point(field_set_allocated:SatelliteEarthSimulation.SimResponse.Frame.mag)
}

// -------------------------------------------------------------------

// SimResponse_Decay_TLEForward

// bool crossed = 1;
inline void SimResponse_Decay_TLEForward::clear_crossed() {
  _impl_.crossed_ = false;
}
inline bool SimResponse_Decay_TLEForward::_internal_crossed() const {
  return _impl_.crossed_;
}
inline bool SimResponse_Decay_TLEForward::crossed() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Decay.TLEForward.crossed)
  return _internal_crossed();
}
inline void SimResponse_Decay_TLEForward::_internal_set_crossed(bool value) {
  
  _impl_.crossed_ = value;
}
inline void SimResponse_Decay_TLEForward::set_crossed(bool value) {
  _internal_set_crossed(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimResponse.Decay.TLEForward.crossed)
}

// string time_utc = 2;
inline void SimResponse_Decay_TLEForward::clear_time_utc() {
  _impl_.time_utc_.ClearToEmpty();
}
inline const std::string& SimResponse_Decay_TLEForward::time_utc() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Decay.TLEForward.time_utc)
  return _internal_time_utc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimResponse_Decay_TLEForward::set_time_utc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.time_utc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimResponse.Decay.TLEForward.time_utc)
}
inline std::string* SimResponse_Decay_TLEForward::mutable_time_utc() {
  std::string* _s = _internal_mutable_time_utc();
  // @@protoc_insertion_point(field_mutable:SatelliteEarthSimulation.SimResponse.Decay.TLEForward.time_utc)
  return _s;
}
inline const std::string& SimResponse_Decay_TLEForward::_internal_time_utc() const {
  return _impl_.time_utc_.Get();
}
inline void SimResponse_Decay_TLEForward::_internal_set_time_utc(const std::string& value) {
  
  _impl_.time_utc_.Set(value, GetArenaForAllocation());
}
inline std::string* SimResponse_Decay_TLEForward::_internal_mutable_time_utc() {
  
  return _impl_.time_utc_.Mutable(GetArenaForAllocation());
}
inline std::string* SimResponse_Decay_TLEForward::release_time_utc() {
  // @@protoc_insertion_point(field_release:SatelliteEarthSimulation.SimResponse.Decay.TLEForward.time_utc)
  return _impl_.time_utc_.Release();
}
inline void SimResponse_Decay_TLEForward::set_allocated_time_utc(std::string* time_utc) {
  if (time_utc != nullptr) {
    
  } else {
    
  }
  _impl_.time_utc_.SetAllocated(time_utc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.time_utc_.IsDefault()) {
    _impl_.time_utc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SatelliteEarthSimulation.SimResponse.Decay.TLEForward.time_utc)
}

// double time_from_start_s = 3;
inline void SimResponse_Decay_TLEForward::clear_time_from_start_s() {
  _impl_.time_from_start_s_ = 0;
}
inline double SimResponse_Decay_TLEForward::_internal_time_from_start_s() const {
  return _impl_.time_from_start_s_;
}
inline double SimResponse_Decay_TLEForward::time_from_start_s() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Decay.TLEForward.time_from_start_s)
  return _internal_time_from_start_s();
}
inline void SimResponse_Decay_TLEForward::_internal_set_time_from_start_s(double value) {
  
  _impl_.time_from_start_s_ = value;
}
inline void SimResponse_Decay_TLEForward::set_time_from_start_s(double value) {
  _internal_set_time_from_start_s(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimResponse.Decay.TLEForward.time_from_start_s)
}

// double uncertainty_s = 4;
inline void SimResponse_Decay_TLEForward::clear_uncertainty_s() {
  _impl_.uncertainty_s_ = 0;
}
inline double SimResponse_Decay_TLEForward::_internal_uncertainty_s() const {
  return _impl_.uncertainty_s_;
}
inline double SimResponse_Decay_TLEForward::uncertainty_s() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Decay.TLEForward.uncertainty_s)
  return _internal_uncertainty_s();
}
inline void SimResponse_Decay_TLEForward::_internal_set_uncertainty_s(double value) {
  
  _impl_.uncertainty_s_ = value;
}
inline void SimResponse_Decay_TLEForward::set_uncertainty_s(double value) {
  _internal_set_uncertainty_s(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimResponse.Decay.TLEForward.uncertainty_s)
}

// -------------------------------------------------------------------

// SimResponse_Decay_PhysicsDrag

// bool crossed = 1;
inline void SimResponse_Decay_PhysicsDrag::clear_crossed() {
  _impl_.crossed_ = false;
}
inline bool SimResponse_Decay_PhysicsDrag::_internal_crossed() const {
  return _impl_.crossed_;
}
inline bool SimResponse_Decay_PhysicsDrag::crossed() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Decay.PhysicsDrag.crossed)
  return _internal_crossed();
}
inline void SimResponse_Decay_PhysicsDrag::_internal_set_crossed(bool value) {
  
  _impl_.crossed_ = value;
}
inline void SimResponse_Decay_PhysicsDrag::set_crossed(bool value) {
  _internal_set_crossed(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimResponse.Decay.PhysicsDrag.crossed)
}

// string time_utc = 2;
inline void SimResponse_Decay_PhysicsDrag::clear_time_utc() {
  _impl_.time_utc_.ClearToEmpty();
}
inline const std::string& SimResponse_Decay_PhysicsDrag::time_utc() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Decay.PhysicsDrag.time_utc)
  return _internal_time_utc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimResponse_Decay_PhysicsDrag::set_time_utc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.time_utc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimResponse.Decay.PhysicsDrag.time_utc)
}
inline std::string* SimResponse_Decay_PhysicsDrag::mutable_time_utc() {
  std::string* _s = _internal_mutable_time_utc();
  // @@protoc_insertion_point(field_mutable:SatelliteEarthSimulation.SimResponse.Decay.PhysicsDrag.time_utc)
  return _s;
}
inline const std::string& SimResponse_Decay_PhysicsDrag::_internal_time_utc() const {
  return _impl_.time_utc_.Get();
}
inline void SimResponse_Decay_PhysicsDrag::_internal_set_time_utc(const std::string& value) {
  
  _impl_.time_utc_.Set(value, GetArenaForAllocation());
}
inline std::string* SimResponse_Decay_PhysicsDrag::_internal_mutable_time_utc() {
  
  return _impl_.time_utc_.Mutable(GetArenaForAllocation());
}
inline std::string* SimResponse_Decay_PhysicsDrag::release_time_utc() {
  // @@protoc_insertion_point(field_release:SatelliteEarthSimulation.SimResponse.Decay.PhysicsDrag.time_utc)
  return _impl_.time_utc_.Release();
}
inline void SimResponse_Decay_PhysicsDrag::set_allocated_time_utc(std::string* time_utc) {
  if (time_utc != nullptr) {
    
  } else {
    
  }
  _impl_.time_utc_.SetAllocated(time_utc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.time_utc_.IsDefault()) {
    _impl_.time_utc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SatelliteEarthSimulation.SimResponse.Decay.PhysicsDrag.time_utc)
}

// double time_from_start_s = 3;
inline void SimResponse_Decay_PhysicsDrag::clear_time_from_start_s() {
  _impl_.time_from_start_s_ = 0;
}
inline double SimResponse_Decay_PhysicsDrag::_internal_time_from_start_s() const {
  return _impl_.time_from_start_s_;
}
inline double SimResponse_Decay_PhysicsDrag::time_from_start_s() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Decay.PhysicsDrag.time_from_start_s)
  return _internal_time_from_start_s();
}
inline void SimResponse_Decay_PhysicsDrag::_internal_set_time_from_start_s(double value) {
  
  _impl_.time_from_start_s_ = value;
}
inline void SimResponse_Decay_PhysicsDrag::set_time_from_start_s(double value) {
  _internal_set_time_from_start_s(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimResponse.Decay.PhysicsDrag.time_from_start_s)
}

// double uncertainty_s = 4;
inline void SimResponse_Decay_PhysicsDrag::clear_uncertainty_s() {
  _impl_.uncertainty_s_ = 0;
}
inline double SimResponse_Decay_PhysicsDrag::_internal_uncertainty_s() const {
  return _impl_.uncertainty_s_;
}
inline double SimResponse_Decay_PhysicsDrag::uncertainty_s() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Decay.PhysicsDrag.uncertainty_s)
  return _internal_uncertainty_s();
}
inline void SimResponse_Decay_PhysicsDrag::_internal_set_uncertainty_s(double value) {
  
  _impl_.uncertainty_s_ = value;
}
inline void SimResponse_Decay_PhysicsDrag::set_uncertainty_s(double value) {
  _internal_set_uncertainty_s(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimResponse.Decay.PhysicsDrag.uncertainty_s)
}

// -------------------------------------------------------------------

// SimResponse_Decay

// double threshold_km = 1;
inline void SimResponse_Decay::clear_threshold_km() {
  _impl_.threshold_km_ = 0;
}
inline double SimResponse_Decay::_internal_threshold_km() const {
  return _impl_.threshold_km_;
}
inline double SimResponse_Decay::threshold_km() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Decay.threshold_km)
  return _internal_threshold_km();
}
inline void SimResponse_Decay::_internal_set_threshold_km(double value) {
  
  _impl_.threshold_km_ = value;
}
inline void SimResponse_Decay::set_threshold_km(double value) {
  _internal_set_threshold_km(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimResponse.Decay.threshold_km)
}

// .SatelliteEarthSimulation.SimResponse.Decay.TLEForward tle_forward = 2;
inline bool SimResponse_Decay::_internal_has_tle_forward() const {
  return this != internal_default_instance() && _impl_.tle_forward_ != nullptr;
}
inline bool SimResponse_Decay::has_tle_forward() const {
  return _internal_has_tle_forward();
}
inline void SimResponse_Decay::clear_tle_forward() {
  if (GetArenaForAllocation() == nullptr && _impl_.tle_forward_ != nullptr) {
    delete _impl_.tle_forward_;
  }
  _impl_.tle_forward_ = nullptr;
}
inline const ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward& SimResponse_Decay::_internal_tle_forward() const {
  const ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward* p = _impl_.tle_forward_;
  return p != nullptr ? *p : reinterpret_cast<const ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward&>(
      ::SatelliteEarthSimulation::_SimResponse_Decay_TLEForward_default_instance_);
}
inline const ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward& SimResponse_Decay::tle_forward() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Decay.tle_forward)
  return _internal_tle_forward();
}
inline void SimResponse_Decay::unsafe_arena_set_allocated_tle_forward(
    ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward* tle_forward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tle_forward_);
  }
  _impl_.tle_forward_ = tle_forward;
  if (tle_forward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SatelliteEarthSimulation.SimResponse.Decay.tle_forward)
}
inline ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward* SimResponse_Decay::release_tle_forward() {
  
  ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward* temp = _impl_.tle_forward_;
  _impl_.tle_forward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward* SimResponse_Decay::unsafe_arena_release_tle_forward() {
  // @@protoc_insertion_point(field_release:SatelliteEarthSimulation.SimResponse.Decay.tle_forward)
  
  ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward* temp = _impl_.tle_forward_;
  _impl_.tle_forward_ = nullptr;
  return temp;
}
inline ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward* SimResponse_Decay::_internal_mutable_tle_forward() {
  
  if (_impl_.tle_forward_ == nullptr) {
    auto* p = CreateMaybeMessage<::SatelliteEarthSimulation::SimResponse_Decay_TLEForward>(GetArenaForAllocation());
    _impl_.tle_forward_ = p;
  }
  return _impl_.tle_forward_;
}
inline ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward* SimResponse_Decay::mutable_tle_forward() {
  ::SatelliteEarthSimulation::SimResponse_Decay_TLEForward* _msg = _internal_mutable_tle_forward();
  // @@protoc_insertion_point(field_mutable:SatelliteEarthSimulation.SimResponse.Decay.tle_forward)
  return _msg;
}
inline void SimResponse_Decay::set_allocated_tle_forward(::SatelliteEarthSimulation::SimResponse_Decay_TLEForward* tle_forward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tle_forward_;
  }
  if (tle_forward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tle_forward);
    if (message_arena != submessage_arena) {
      tle_forward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tle_forward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tle_forward_ = tle_forward;
  // @@protoc_insertion_point(field_set_allocated:SatelliteEarthSimulation.SimResponse.Decay.tle_forward)
}

// .SatelliteEarthSimulation.SimResponse.Decay.PhysicsDrag physics_drag = 3;
inline bool SimResponse_Decay::_internal_has_physics_drag() const {
  return this != internal_default_instance() && _impl_.physics_drag_ != nullptr;
}
inline bool SimResponse_Decay::has_physics_drag() const {
  return _internal_has_physics_drag();
}
inline void SimResponse_Decay::clear_physics_drag() {
  if (GetArenaForAllocation() == nullptr && _impl_.physics_drag_ != nullptr) {
    delete _impl_.physics_drag_;
  }
  _impl_.physics_drag_ = nullptr;
}
inline const ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag& SimResponse_Decay::_internal_physics_drag() const {
  const ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag* p = _impl_.physics_drag_;
  return p != nullptr ? *p : reinterpret_cast<const ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag&>(
      ::SatelliteEarthSimulation::_SimResponse_Decay_PhysicsDrag_default_instance_);
}
inline const ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag& SimResponse_Decay::physics_drag() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Decay.physics_drag)
  return _internal_physics_drag();
}
inline void SimResponse_Decay::unsafe_arena_set_allocated_physics_drag(
    ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag* physics_drag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.physics_drag_);
  }
  _impl_.physics_drag_ = physics_drag;
  if (physics_drag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SatelliteEarthSimulation.SimResponse.Decay.physics_drag)
}
inline ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag* SimResponse_Decay::release_physics_drag() {
  
  ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag* temp = _impl_.physics_drag_;
  _impl_.physics_drag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag* SimResponse_Decay::unsafe_arena_release_physics_drag() {
  // @@protoc_insertion_point(field_release:SatelliteEarthSimulation.SimResponse.Decay.physics_drag)
  
  ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag* temp = _impl_.physics_drag_;
  _impl_.physics_drag_ = nullptr;
  return temp;
}
inline ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag* SimResponse_Decay::_internal_mutable_physics_drag() {
  
  if (_impl_.physics_drag_ == nullptr) {
    auto* p = CreateMaybeMessage<::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag>(GetArenaForAllocation());
    _impl_.physics_drag_ = p;
  }
  return _impl_.physics_drag_;
}
inline ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag* SimResponse_Decay::mutable_physics_drag() {
  ::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag* _msg = _internal_mutable_physics_drag();
  // @@protoc_insertion_point(field_mutable:SatelliteEarthSimulation.SimResponse.Decay.physics_drag)
  return _msg;
}
inline void SimResponse_Decay::set_allocated_physics_drag(::SatelliteEarthSimulation::SimResponse_Decay_PhysicsDrag* physics_drag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.physics_drag_;
  }
  if (physics_drag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(physics_drag);
    if (message_arena != submessage_arena) {
      physics_drag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, physics_drag, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.physics_drag_ = physics_drag;
  // @@protoc_insertion_point(field_set_allocated:SatelliteEarthSimulation.SimResponse.Decay.physics_drag)
}

// -------------------------------------------------------------------

// SimResponse_Meta

// uint32 points_generated = 2;
inline void SimResponse_Meta::clear_points_generated() {
  _impl_.points_generated_ = 0u;
}
inline uint32_t SimResponse_Meta::_internal_points_generated() const {
  return _impl_.points_generated_;
}
inline uint32_t SimResponse_Meta::points_generated() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Meta.points_generated)
  return _internal_points_generated();
}
inline void SimResponse_Meta::_internal_set_points_generated(uint32_t value) {
  
  _impl_.points_generated_ = value;
}
inline void SimResponse_Meta::set_points_generated(uint32_t value) {
  _internal_set_points_generated(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimResponse.Meta.points_generated)
}

// string tle_epoch_utc = 4;
inline void SimResponse_Meta::clear_tle_epoch_utc() {
  _impl_.tle_epoch_utc_.ClearToEmpty();
}
inline const std::string& SimResponse_Meta::tle_epoch_utc() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Meta.tle_epoch_utc)
  return _internal_tle_epoch_utc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimResponse_Meta::set_tle_epoch_utc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tle_epoch_utc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimResponse.Meta.tle_epoch_utc)
}
inline std::string* SimResponse_Meta::mutable_tle_epoch_utc() {
  std::string* _s = _internal_mutable_tle_epoch_utc();
  // @@protoc_insertion_point(field_mutable:SatelliteEarthSimulation.SimResponse.Meta.tle_epoch_utc)
  return _s;
}
inline const std::string& SimResponse_Meta::_internal_tle_epoch_utc() const {
  return _impl_.tle_epoch_utc_.Get();
}
inline void SimResponse_Meta::_internal_set_tle_epoch_utc(const std::string& value) {
  
  _impl_.tle_epoch_utc_.Set(value, GetArenaForAllocation());
}
inline std::string* SimResponse_Meta::_internal_mutable_tle_epoch_utc() {
  
  return _impl_.tle_epoch_utc_.Mutable(GetArenaForAllocation());
}
inline std::string* SimResponse_Meta::release_tle_epoch_utc() {
  // @@protoc_insertion_point(field_release:SatelliteEarthSimulation.SimResponse.Meta.tle_epoch_utc)
  return _impl_.tle_epoch_utc_.Release();
}
inline void SimResponse_Meta::set_allocated_tle_epoch_utc(std::string* tle_epoch_utc) {
  if (tle_epoch_utc != nullptr) {
    
  } else {
    
  }
  _impl_.tle_epoch_utc_.SetAllocated(tle_epoch_utc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tle_epoch_utc_.IsDefault()) {
    _impl_.tle_epoch_utc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SatelliteEarthSimulation.SimResponse.Meta.tle_epoch_utc)
}

// bool out_of_tle_epoch_window = 5;
inline void SimResponse_Meta::clear_out_of_tle_epoch_window() {
  _impl_.out_of_tle_epoch_window_ = false;
}
inline bool SimResponse_Meta::_internal_out_of_tle_epoch_window() const {
  return _impl_.out_of_tle_epoch_window_;
}
inline bool SimResponse_Meta::out_of_tle_epoch_window() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.Meta.out_of_tle_epoch_window)
  return _internal_out_of_tle_epoch_window();
}
inline void SimResponse_Meta::_internal_set_out_of_tle_epoch_window(bool value) {
  
  _impl_.out_of_tle_epoch_window_ = value;
}
inline void SimResponse_Meta::set_out_of_tle_epoch_window(bool value) {
  _internal_set_out_of_tle_epoch_window(value);
  // @@protoc_insertion_point(field_set:SatelliteEarthSimulation.SimResponse.Meta.out_of_tle_epoch_window)
}

// -------------------------------------------------------------------

// SimResponse

// repeated .SatelliteEarthSimulation.SimResponse.Frame frames = 1;
inline int SimResponse::_internal_frames_size() const {
  return _impl_.frames_.size();
}
inline int SimResponse::frames_size() const {
  return _internal_frames_size();
}
inline void SimResponse::clear_frames() {
  _impl_.frames_.Clear();
}
inline ::SatelliteEarthSimulation::SimResponse_Frame* SimResponse::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:SatelliteEarthSimulation.SimResponse.frames)
  return _impl_.frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SatelliteEarthSimulation::SimResponse_Frame >*
SimResponse::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:SatelliteEarthSimulation.SimResponse.frames)
  return &_impl_.frames_;
}
inline const ::SatelliteEarthSimulation::SimResponse_Frame& SimResponse::_internal_frames(int index) const {
  return _impl_.frames_.Get(index);
}
inline const ::SatelliteEarthSimulation::SimResponse_Frame& SimResponse::frames(int index) const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.frames)
  return _internal_frames(index);
}
inline ::SatelliteEarthSimulation::SimResponse_Frame* SimResponse::_internal_add_frames() {
  return _impl_.frames_.Add();
}
inline ::SatelliteEarthSimulation::SimResponse_Frame* SimResponse::add_frames() {
  ::SatelliteEarthSimulation::SimResponse_Frame* _add = _internal_add_frames();
  // @@protoc_insertion_point(field_add:SatelliteEarthSimulation.SimResponse.frames)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SatelliteEarthSimulation::SimResponse_Frame >&
SimResponse::frames() const {
  // @@protoc_insertion_point(field_list:SatelliteEarthSimulation.SimResponse.frames)
  return _impl_.frames_;
}

// .SatelliteEarthSimulation.SimResponse.Decay decay = 2;
inline bool SimResponse::_internal_has_decay() const {
  return this != internal_default_instance() && _impl_.decay_ != nullptr;
}
inline bool SimResponse::has_decay() const {
  return _internal_has_decay();
}
inline void SimResponse::clear_decay() {
  if (GetArenaForAllocation() == nullptr && _impl_.decay_ != nullptr) {
    delete _impl_.decay_;
  }
  _impl_.decay_ = nullptr;
}
inline const ::SatelliteEarthSimulation::SimResponse_Decay& SimResponse::_internal_decay() const {
  const ::SatelliteEarthSimulation::SimResponse_Decay* p = _impl_.decay_;
  return p != nullptr ? *p : reinterpret_cast<const ::SatelliteEarthSimulation::SimResponse_Decay&>(
      ::SatelliteEarthSimulation::_SimResponse_Decay_default_instance_);
}
inline const ::SatelliteEarthSimulation::SimResponse_Decay& SimResponse::decay() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.decay)
  return _internal_decay();
}
inline void SimResponse::unsafe_arena_set_allocated_decay(
    ::SatelliteEarthSimulation::SimResponse_Decay* decay) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.decay_);
  }
  _impl_.decay_ = decay;
  if (decay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SatelliteEarthSimulation.SimResponse.decay)
}
inline ::SatelliteEarthSimulation::SimResponse_Decay* SimResponse::release_decay() {
  
  ::SatelliteEarthSimulation::SimResponse_Decay* temp = _impl_.decay_;
  _impl_.decay_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SatelliteEarthSimulation::SimResponse_Decay* SimResponse::unsafe_arena_release_decay() {
  // @@protoc_insertion_point(field_release:SatelliteEarthSimulation.SimResponse.decay)
  
  ::SatelliteEarthSimulation::SimResponse_Decay* temp = _impl_.decay_;
  _impl_.decay_ = nullptr;
  return temp;
}
inline ::SatelliteEarthSimulation::SimResponse_Decay* SimResponse::_internal_mutable_decay() {
  
  if (_impl_.decay_ == nullptr) {
    auto* p = CreateMaybeMessage<::SatelliteEarthSimulation::SimResponse_Decay>(GetArenaForAllocation());
    _impl_.decay_ = p;
  }
  return _impl_.decay_;
}
inline ::SatelliteEarthSimulation::SimResponse_Decay* SimResponse::mutable_decay() {
  ::SatelliteEarthSimulation::SimResponse_Decay* _msg = _internal_mutable_decay();
  // @@protoc_insertion_point(field_mutable:SatelliteEarthSimulation.SimResponse.decay)
  return _msg;
}
inline void SimResponse::set_allocated_decay(::SatelliteEarthSimulation::SimResponse_Decay* decay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.decay_;
  }
  if (decay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(decay);
    if (message_arena != submessage_arena) {
      decay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decay, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.decay_ = decay;
  // @@protoc_insertion_point(field_set_allocated:SatelliteEarthSimulation.SimResponse.decay)
}

// .SatelliteEarthSimulation.SimResponse.Meta meta = 3;
inline bool SimResponse::_internal_has_meta() const {
  return this != internal_default_instance() && _impl_.meta_ != nullptr;
}
inline bool SimResponse::has_meta() const {
  return _internal_has_meta();
}
inline void SimResponse::clear_meta() {
  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
}
inline const ::SatelliteEarthSimulation::SimResponse_Meta& SimResponse::_internal_meta() const {
  const ::SatelliteEarthSimulation::SimResponse_Meta* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::SatelliteEarthSimulation::SimResponse_Meta&>(
      ::SatelliteEarthSimulation::_SimResponse_Meta_default_instance_);
}
inline const ::SatelliteEarthSimulation::SimResponse_Meta& SimResponse::meta() const {
  // @@protoc_insertion_point(field_get:SatelliteEarthSimulation.SimResponse.meta)
  return _internal_meta();
}
inline void SimResponse::unsafe_arena_set_allocated_meta(
    ::SatelliteEarthSimulation::SimResponse_Meta* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SatelliteEarthSimulation.SimResponse.meta)
}
inline ::SatelliteEarthSimulation::SimResponse_Meta* SimResponse::release_meta() {
  
  ::SatelliteEarthSimulation::SimResponse_Meta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SatelliteEarthSimulation::SimResponse_Meta* SimResponse::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:SatelliteEarthSimulation.SimResponse.meta)
  
  ::SatelliteEarthSimulation::SimResponse_Meta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::SatelliteEarthSimulation::SimResponse_Meta* SimResponse::_internal_mutable_meta() {
  
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::SatelliteEarthSimulation::SimResponse_Meta>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::SatelliteEarthSimulation::SimResponse_Meta* SimResponse::mutable_meta() {
  ::SatelliteEarthSimulation::SimResponse_Meta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:SatelliteEarthSimulation.SimResponse.meta)
  return _msg;
}
inline void SimResponse::set_allocated_meta(::SatelliteEarthSimulation::SimResponse_Meta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:SatelliteEarthSimulation.SimResponse.meta)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SatelliteEarthSimulation

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_satellite_5fEarth_5fsimulation_2eproto
