// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Earth_simulation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Earth_5fsimulation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Earth_5fsimulation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Earth_5fsimulation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Earth_5fsimulation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Earth_5fsimulation_2eproto;
namespace EarthSimulation {
class EarthRequest;
struct EarthRequestDefaultTypeInternal;
extern EarthRequestDefaultTypeInternal _EarthRequest_default_instance_;
class EarthRequest_Nodes;
struct EarthRequest_NodesDefaultTypeInternal;
extern EarthRequest_NodesDefaultTypeInternal _EarthRequest_Nodes_default_instance_;
class EarthRequest_Nodes_Geo;
struct EarthRequest_Nodes_GeoDefaultTypeInternal;
extern EarthRequest_Nodes_GeoDefaultTypeInternal _EarthRequest_Nodes_Geo_default_instance_;
class EarthResponse;
struct EarthResponseDefaultTypeInternal;
extern EarthResponseDefaultTypeInternal _EarthResponse_default_instance_;
class EarthResponse_Frame;
struct EarthResponse_FrameDefaultTypeInternal;
extern EarthResponse_FrameDefaultTypeInternal _EarthResponse_Frame_default_instance_;
class EarthResponse_Frame_Geo;
struct EarthResponse_Frame_GeoDefaultTypeInternal;
extern EarthResponse_Frame_GeoDefaultTypeInternal _EarthResponse_Frame_Geo_default_instance_;
class EarthResponse_Frame_Mag;
struct EarthResponse_Frame_MagDefaultTypeInternal;
extern EarthResponse_Frame_MagDefaultTypeInternal _EarthResponse_Frame_Mag_default_instance_;
}  // namespace EarthSimulation
PROTOBUF_NAMESPACE_OPEN
template<> ::EarthSimulation::EarthRequest* Arena::CreateMaybeMessage<::EarthSimulation::EarthRequest>(Arena*);
template<> ::EarthSimulation::EarthRequest_Nodes* Arena::CreateMaybeMessage<::EarthSimulation::EarthRequest_Nodes>(Arena*);
template<> ::EarthSimulation::EarthRequest_Nodes_Geo* Arena::CreateMaybeMessage<::EarthSimulation::EarthRequest_Nodes_Geo>(Arena*);
template<> ::EarthSimulation::EarthResponse* Arena::CreateMaybeMessage<::EarthSimulation::EarthResponse>(Arena*);
template<> ::EarthSimulation::EarthResponse_Frame* Arena::CreateMaybeMessage<::EarthSimulation::EarthResponse_Frame>(Arena*);
template<> ::EarthSimulation::EarthResponse_Frame_Geo* Arena::CreateMaybeMessage<::EarthSimulation::EarthResponse_Frame_Geo>(Arena*);
template<> ::EarthSimulation::EarthResponse_Frame_Mag* Arena::CreateMaybeMessage<::EarthSimulation::EarthResponse_Frame_Mag>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace EarthSimulation {

// ===================================================================

class EarthRequest_Nodes_Geo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EarthSimulation.EarthRequest.Nodes.Geo) */ {
 public:
  inline EarthRequest_Nodes_Geo() : EarthRequest_Nodes_Geo(nullptr) {}
  ~EarthRequest_Nodes_Geo() override;
  explicit constexpr EarthRequest_Nodes_Geo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EarthRequest_Nodes_Geo(const EarthRequest_Nodes_Geo& from);
  EarthRequest_Nodes_Geo(EarthRequest_Nodes_Geo&& from) noexcept
    : EarthRequest_Nodes_Geo() {
    *this = ::std::move(from);
  }

  inline EarthRequest_Nodes_Geo& operator=(const EarthRequest_Nodes_Geo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EarthRequest_Nodes_Geo& operator=(EarthRequest_Nodes_Geo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EarthRequest_Nodes_Geo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EarthRequest_Nodes_Geo* internal_default_instance() {
    return reinterpret_cast<const EarthRequest_Nodes_Geo*>(
               &_EarthRequest_Nodes_Geo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EarthRequest_Nodes_Geo& a, EarthRequest_Nodes_Geo& b) {
    a.Swap(&b);
  }
  inline void Swap(EarthRequest_Nodes_Geo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EarthRequest_Nodes_Geo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EarthRequest_Nodes_Geo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EarthRequest_Nodes_Geo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EarthRequest_Nodes_Geo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EarthRequest_Nodes_Geo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EarthRequest_Nodes_Geo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EarthSimulation.EarthRequest.Nodes.Geo";
  }
  protected:
  explicit EarthRequest_Nodes_Geo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatDegFieldNumber = 1,
    kLonDegFieldNumber = 2,
    kAltKmFieldNumber = 3,
  };
  // double lat_deg = 1;
  void clear_lat_deg();
  double lat_deg() const;
  void set_lat_deg(double value);
  private:
  double _internal_lat_deg() const;
  void _internal_set_lat_deg(double value);
  public:

  // double lon_deg = 2;
  void clear_lon_deg();
  double lon_deg() const;
  void set_lon_deg(double value);
  private:
  double _internal_lon_deg() const;
  void _internal_set_lon_deg(double value);
  public:

  // double alt_km = 3;
  void clear_alt_km();
  double alt_km() const;
  void set_alt_km(double value);
  private:
  double _internal_alt_km() const;
  void _internal_set_alt_km(double value);
  public:

  // @@protoc_insertion_point(class_scope:EarthSimulation.EarthRequest.Nodes.Geo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lat_deg_;
  double lon_deg_;
  double alt_km_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Earth_5fsimulation_2eproto;
};
// -------------------------------------------------------------------

class EarthRequest_Nodes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EarthSimulation.EarthRequest.Nodes) */ {
 public:
  inline EarthRequest_Nodes() : EarthRequest_Nodes(nullptr) {}
  ~EarthRequest_Nodes() override;
  explicit constexpr EarthRequest_Nodes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EarthRequest_Nodes(const EarthRequest_Nodes& from);
  EarthRequest_Nodes(EarthRequest_Nodes&& from) noexcept
    : EarthRequest_Nodes() {
    *this = ::std::move(from);
  }

  inline EarthRequest_Nodes& operator=(const EarthRequest_Nodes& from) {
    CopyFrom(from);
    return *this;
  }
  inline EarthRequest_Nodes& operator=(EarthRequest_Nodes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EarthRequest_Nodes& default_instance() {
    return *internal_default_instance();
  }
  static inline const EarthRequest_Nodes* internal_default_instance() {
    return reinterpret_cast<const EarthRequest_Nodes*>(
               &_EarthRequest_Nodes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EarthRequest_Nodes& a, EarthRequest_Nodes& b) {
    a.Swap(&b);
  }
  inline void Swap(EarthRequest_Nodes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EarthRequest_Nodes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EarthRequest_Nodes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EarthRequest_Nodes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EarthRequest_Nodes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EarthRequest_Nodes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EarthRequest_Nodes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EarthSimulation.EarthRequest.Nodes";
  }
  protected:
  explicit EarthRequest_Nodes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EarthRequest_Nodes_Geo Geo;

  // accessors -------------------------------------------------------

  enum : int {
    kGeoFieldNumber = 2,
    kTRelSFieldNumber = 1,
  };
  // .EarthSimulation.EarthRequest.Nodes.Geo geo = 2;
  bool has_geo() const;
  private:
  bool _internal_has_geo() const;
  public:
  void clear_geo();
  const ::EarthSimulation::EarthRequest_Nodes_Geo& geo() const;
  PROTOBUF_NODISCARD ::EarthSimulation::EarthRequest_Nodes_Geo* release_geo();
  ::EarthSimulation::EarthRequest_Nodes_Geo* mutable_geo();
  void set_allocated_geo(::EarthSimulation::EarthRequest_Nodes_Geo* geo);
  private:
  const ::EarthSimulation::EarthRequest_Nodes_Geo& _internal_geo() const;
  ::EarthSimulation::EarthRequest_Nodes_Geo* _internal_mutable_geo();
  public:
  void unsafe_arena_set_allocated_geo(
      ::EarthSimulation::EarthRequest_Nodes_Geo* geo);
  ::EarthSimulation::EarthRequest_Nodes_Geo* unsafe_arena_release_geo();

  // double t_rel_s = 1;
  void clear_t_rel_s();
  double t_rel_s() const;
  void set_t_rel_s(double value);
  private:
  double _internal_t_rel_s() const;
  void _internal_set_t_rel_s(double value);
  public:

  // @@protoc_insertion_point(class_scope:EarthSimulation.EarthRequest.Nodes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::EarthSimulation::EarthRequest_Nodes_Geo* geo_;
  double t_rel_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Earth_5fsimulation_2eproto;
};
// -------------------------------------------------------------------

class EarthRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EarthSimulation.EarthRequest) */ {
 public:
  inline EarthRequest() : EarthRequest(nullptr) {}
  ~EarthRequest() override;
  explicit constexpr EarthRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EarthRequest(const EarthRequest& from);
  EarthRequest(EarthRequest&& from) noexcept
    : EarthRequest() {
    *this = ::std::move(from);
  }

  inline EarthRequest& operator=(const EarthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EarthRequest& operator=(EarthRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EarthRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EarthRequest* internal_default_instance() {
    return reinterpret_cast<const EarthRequest*>(
               &_EarthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EarthRequest& a, EarthRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EarthRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EarthRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EarthRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EarthRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EarthRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EarthRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EarthRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EarthSimulation.EarthRequest";
  }
  protected:
  explicit EarthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EarthRequest_Nodes Nodes;

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
  };
  // repeated .EarthSimulation.EarthRequest.Nodes nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::EarthSimulation::EarthRequest_Nodes* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EarthSimulation::EarthRequest_Nodes >*
      mutable_nodes();
  private:
  const ::EarthSimulation::EarthRequest_Nodes& _internal_nodes(int index) const;
  ::EarthSimulation::EarthRequest_Nodes* _internal_add_nodes();
  public:
  const ::EarthSimulation::EarthRequest_Nodes& nodes(int index) const;
  ::EarthSimulation::EarthRequest_Nodes* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EarthSimulation::EarthRequest_Nodes >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:EarthSimulation.EarthRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EarthSimulation::EarthRequest_Nodes > nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Earth_5fsimulation_2eproto;
};
// -------------------------------------------------------------------

class EarthResponse_Frame_Geo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EarthSimulation.EarthResponse.Frame.Geo) */ {
 public:
  inline EarthResponse_Frame_Geo() : EarthResponse_Frame_Geo(nullptr) {}
  ~EarthResponse_Frame_Geo() override;
  explicit constexpr EarthResponse_Frame_Geo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EarthResponse_Frame_Geo(const EarthResponse_Frame_Geo& from);
  EarthResponse_Frame_Geo(EarthResponse_Frame_Geo&& from) noexcept
    : EarthResponse_Frame_Geo() {
    *this = ::std::move(from);
  }

  inline EarthResponse_Frame_Geo& operator=(const EarthResponse_Frame_Geo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EarthResponse_Frame_Geo& operator=(EarthResponse_Frame_Geo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EarthResponse_Frame_Geo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EarthResponse_Frame_Geo* internal_default_instance() {
    return reinterpret_cast<const EarthResponse_Frame_Geo*>(
               &_EarthResponse_Frame_Geo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EarthResponse_Frame_Geo& a, EarthResponse_Frame_Geo& b) {
    a.Swap(&b);
  }
  inline void Swap(EarthResponse_Frame_Geo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EarthResponse_Frame_Geo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EarthResponse_Frame_Geo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EarthResponse_Frame_Geo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EarthResponse_Frame_Geo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EarthResponse_Frame_Geo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EarthResponse_Frame_Geo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EarthSimulation.EarthResponse.Frame.Geo";
  }
  protected:
  explicit EarthResponse_Frame_Geo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatDegFieldNumber = 1,
    kLonDegFieldNumber = 2,
    kAltKmFieldNumber = 3,
  };
  // double lat_deg = 1;
  void clear_lat_deg();
  double lat_deg() const;
  void set_lat_deg(double value);
  private:
  double _internal_lat_deg() const;
  void _internal_set_lat_deg(double value);
  public:

  // double lon_deg = 2;
  void clear_lon_deg();
  double lon_deg() const;
  void set_lon_deg(double value);
  private:
  double _internal_lon_deg() const;
  void _internal_set_lon_deg(double value);
  public:

  // double alt_km = 3;
  void clear_alt_km();
  double alt_km() const;
  void set_alt_km(double value);
  private:
  double _internal_alt_km() const;
  void _internal_set_alt_km(double value);
  public:

  // @@protoc_insertion_point(class_scope:EarthSimulation.EarthResponse.Frame.Geo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lat_deg_;
  double lon_deg_;
  double alt_km_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Earth_5fsimulation_2eproto;
};
// -------------------------------------------------------------------

class EarthResponse_Frame_Mag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EarthSimulation.EarthResponse.Frame.Mag) */ {
 public:
  inline EarthResponse_Frame_Mag() : EarthResponse_Frame_Mag(nullptr) {}
  ~EarthResponse_Frame_Mag() override;
  explicit constexpr EarthResponse_Frame_Mag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EarthResponse_Frame_Mag(const EarthResponse_Frame_Mag& from);
  EarthResponse_Frame_Mag(EarthResponse_Frame_Mag&& from) noexcept
    : EarthResponse_Frame_Mag() {
    *this = ::std::move(from);
  }

  inline EarthResponse_Frame_Mag& operator=(const EarthResponse_Frame_Mag& from) {
    CopyFrom(from);
    return *this;
  }
  inline EarthResponse_Frame_Mag& operator=(EarthResponse_Frame_Mag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EarthResponse_Frame_Mag& default_instance() {
    return *internal_default_instance();
  }
  static inline const EarthResponse_Frame_Mag* internal_default_instance() {
    return reinterpret_cast<const EarthResponse_Frame_Mag*>(
               &_EarthResponse_Frame_Mag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EarthResponse_Frame_Mag& a, EarthResponse_Frame_Mag& b) {
    a.Swap(&b);
  }
  inline void Swap(EarthResponse_Frame_Mag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EarthResponse_Frame_Mag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EarthResponse_Frame_Mag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EarthResponse_Frame_Mag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EarthResponse_Frame_Mag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EarthResponse_Frame_Mag& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EarthResponse_Frame_Mag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EarthSimulation.EarthResponse.Frame.Mag";
  }
  protected:
  explicit EarthResponse_Frame_Mag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXNTFieldNumber = 1,
    kYNTFieldNumber = 2,
    kZNTFieldNumber = 3,
    kFNTFieldNumber = 4,
  };
  // double x_nT = 1;
  void clear_x_nt();
  double x_nt() const;
  void set_x_nt(double value);
  private:
  double _internal_x_nt() const;
  void _internal_set_x_nt(double value);
  public:

  // double y_nT = 2;
  void clear_y_nt();
  double y_nt() const;
  void set_y_nt(double value);
  private:
  double _internal_y_nt() const;
  void _internal_set_y_nt(double value);
  public:

  // double z_nT = 3;
  void clear_z_nt();
  double z_nt() const;
  void set_z_nt(double value);
  private:
  double _internal_z_nt() const;
  void _internal_set_z_nt(double value);
  public:

  // double f_nT = 4;
  void clear_f_nt();
  double f_nt() const;
  void set_f_nt(double value);
  private:
  double _internal_f_nt() const;
  void _internal_set_f_nt(double value);
  public:

  // @@protoc_insertion_point(class_scope:EarthSimulation.EarthResponse.Frame.Mag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_nt_;
  double y_nt_;
  double z_nt_;
  double f_nt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Earth_5fsimulation_2eproto;
};
// -------------------------------------------------------------------

class EarthResponse_Frame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EarthSimulation.EarthResponse.Frame) */ {
 public:
  inline EarthResponse_Frame() : EarthResponse_Frame(nullptr) {}
  ~EarthResponse_Frame() override;
  explicit constexpr EarthResponse_Frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EarthResponse_Frame(const EarthResponse_Frame& from);
  EarthResponse_Frame(EarthResponse_Frame&& from) noexcept
    : EarthResponse_Frame() {
    *this = ::std::move(from);
  }

  inline EarthResponse_Frame& operator=(const EarthResponse_Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline EarthResponse_Frame& operator=(EarthResponse_Frame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EarthResponse_Frame& default_instance() {
    return *internal_default_instance();
  }
  static inline const EarthResponse_Frame* internal_default_instance() {
    return reinterpret_cast<const EarthResponse_Frame*>(
               &_EarthResponse_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EarthResponse_Frame& a, EarthResponse_Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(EarthResponse_Frame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EarthResponse_Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EarthResponse_Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EarthResponse_Frame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EarthResponse_Frame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EarthResponse_Frame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EarthResponse_Frame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EarthSimulation.EarthResponse.Frame";
  }
  protected:
  explicit EarthResponse_Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EarthResponse_Frame_Geo Geo;
  typedef EarthResponse_Frame_Mag Mag;

  // accessors -------------------------------------------------------

  enum : int {
    kGeoFieldNumber = 2,
    kMagFieldNumber = 3,
    kTRelSFieldNumber = 1,
  };
  // .EarthSimulation.EarthResponse.Frame.Geo geo = 2;
  bool has_geo() const;
  private:
  bool _internal_has_geo() const;
  public:
  void clear_geo();
  const ::EarthSimulation::EarthResponse_Frame_Geo& geo() const;
  PROTOBUF_NODISCARD ::EarthSimulation::EarthResponse_Frame_Geo* release_geo();
  ::EarthSimulation::EarthResponse_Frame_Geo* mutable_geo();
  void set_allocated_geo(::EarthSimulation::EarthResponse_Frame_Geo* geo);
  private:
  const ::EarthSimulation::EarthResponse_Frame_Geo& _internal_geo() const;
  ::EarthSimulation::EarthResponse_Frame_Geo* _internal_mutable_geo();
  public:
  void unsafe_arena_set_allocated_geo(
      ::EarthSimulation::EarthResponse_Frame_Geo* geo);
  ::EarthSimulation::EarthResponse_Frame_Geo* unsafe_arena_release_geo();

  // .EarthSimulation.EarthResponse.Frame.Mag mag = 3;
  bool has_mag() const;
  private:
  bool _internal_has_mag() const;
  public:
  void clear_mag();
  const ::EarthSimulation::EarthResponse_Frame_Mag& mag() const;
  PROTOBUF_NODISCARD ::EarthSimulation::EarthResponse_Frame_Mag* release_mag();
  ::EarthSimulation::EarthResponse_Frame_Mag* mutable_mag();
  void set_allocated_mag(::EarthSimulation::EarthResponse_Frame_Mag* mag);
  private:
  const ::EarthSimulation::EarthResponse_Frame_Mag& _internal_mag() const;
  ::EarthSimulation::EarthResponse_Frame_Mag* _internal_mutable_mag();
  public:
  void unsafe_arena_set_allocated_mag(
      ::EarthSimulation::EarthResponse_Frame_Mag* mag);
  ::EarthSimulation::EarthResponse_Frame_Mag* unsafe_arena_release_mag();

  // double t_rel_s = 1;
  void clear_t_rel_s();
  double t_rel_s() const;
  void set_t_rel_s(double value);
  private:
  double _internal_t_rel_s() const;
  void _internal_set_t_rel_s(double value);
  public:

  // @@protoc_insertion_point(class_scope:EarthSimulation.EarthResponse.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::EarthSimulation::EarthResponse_Frame_Geo* geo_;
  ::EarthSimulation::EarthResponse_Frame_Mag* mag_;
  double t_rel_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Earth_5fsimulation_2eproto;
};
// -------------------------------------------------------------------

class EarthResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EarthSimulation.EarthResponse) */ {
 public:
  inline EarthResponse() : EarthResponse(nullptr) {}
  ~EarthResponse() override;
  explicit constexpr EarthResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EarthResponse(const EarthResponse& from);
  EarthResponse(EarthResponse&& from) noexcept
    : EarthResponse() {
    *this = ::std::move(from);
  }

  inline EarthResponse& operator=(const EarthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EarthResponse& operator=(EarthResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EarthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EarthResponse* internal_default_instance() {
    return reinterpret_cast<const EarthResponse*>(
               &_EarthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EarthResponse& a, EarthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EarthResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EarthResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EarthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EarthResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EarthResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EarthResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EarthResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EarthSimulation.EarthResponse";
  }
  protected:
  explicit EarthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EarthResponse_Frame Frame;

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 1,
  };
  // repeated .EarthSimulation.EarthResponse.Frame frames = 1;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::EarthSimulation::EarthResponse_Frame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EarthSimulation::EarthResponse_Frame >*
      mutable_frames();
  private:
  const ::EarthSimulation::EarthResponse_Frame& _internal_frames(int index) const;
  ::EarthSimulation::EarthResponse_Frame* _internal_add_frames();
  public:
  const ::EarthSimulation::EarthResponse_Frame& frames(int index) const;
  ::EarthSimulation::EarthResponse_Frame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EarthSimulation::EarthResponse_Frame >&
      frames() const;

  // @@protoc_insertion_point(class_scope:EarthSimulation.EarthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EarthSimulation::EarthResponse_Frame > frames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Earth_5fsimulation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EarthRequest_Nodes_Geo

// double lat_deg = 1;
inline void EarthRequest_Nodes_Geo::clear_lat_deg() {
  lat_deg_ = 0;
}
inline double EarthRequest_Nodes_Geo::_internal_lat_deg() const {
  return lat_deg_;
}
inline double EarthRequest_Nodes_Geo::lat_deg() const {
  // @@protoc_insertion_point(field_get:EarthSimulation.EarthRequest.Nodes.Geo.lat_deg)
  return _internal_lat_deg();
}
inline void EarthRequest_Nodes_Geo::_internal_set_lat_deg(double value) {
  
  lat_deg_ = value;
}
inline void EarthRequest_Nodes_Geo::set_lat_deg(double value) {
  _internal_set_lat_deg(value);
  // @@protoc_insertion_point(field_set:EarthSimulation.EarthRequest.Nodes.Geo.lat_deg)
}

// double lon_deg = 2;
inline void EarthRequest_Nodes_Geo::clear_lon_deg() {
  lon_deg_ = 0;
}
inline double EarthRequest_Nodes_Geo::_internal_lon_deg() const {
  return lon_deg_;
}
inline double EarthRequest_Nodes_Geo::lon_deg() const {
  // @@protoc_insertion_point(field_get:EarthSimulation.EarthRequest.Nodes.Geo.lon_deg)
  return _internal_lon_deg();
}
inline void EarthRequest_Nodes_Geo::_internal_set_lon_deg(double value) {
  
  lon_deg_ = value;
}
inline void EarthRequest_Nodes_Geo::set_lon_deg(double value) {
  _internal_set_lon_deg(value);
  // @@protoc_insertion_point(field_set:EarthSimulation.EarthRequest.Nodes.Geo.lon_deg)
}

// double alt_km = 3;
inline void EarthRequest_Nodes_Geo::clear_alt_km() {
  alt_km_ = 0;
}
inline double EarthRequest_Nodes_Geo::_internal_alt_km() const {
  return alt_km_;
}
inline double EarthRequest_Nodes_Geo::alt_km() const {
  // @@protoc_insertion_point(field_get:EarthSimulation.EarthRequest.Nodes.Geo.alt_km)
  return _internal_alt_km();
}
inline void EarthRequest_Nodes_Geo::_internal_set_alt_km(double value) {
  
  alt_km_ = value;
}
inline void EarthRequest_Nodes_Geo::set_alt_km(double value) {
  _internal_set_alt_km(value);
  // @@protoc_insertion_point(field_set:EarthSimulation.EarthRequest.Nodes.Geo.alt_km)
}

// -------------------------------------------------------------------

// EarthRequest_Nodes

// double t_rel_s = 1;
inline void EarthRequest_Nodes::clear_t_rel_s() {
  t_rel_s_ = 0;
}
inline double EarthRequest_Nodes::_internal_t_rel_s() const {
  return t_rel_s_;
}
inline double EarthRequest_Nodes::t_rel_s() const {
  // @@protoc_insertion_point(field_get:EarthSimulation.EarthRequest.Nodes.t_rel_s)
  return _internal_t_rel_s();
}
inline void EarthRequest_Nodes::_internal_set_t_rel_s(double value) {
  
  t_rel_s_ = value;
}
inline void EarthRequest_Nodes::set_t_rel_s(double value) {
  _internal_set_t_rel_s(value);
  // @@protoc_insertion_point(field_set:EarthSimulation.EarthRequest.Nodes.t_rel_s)
}

// .EarthSimulation.EarthRequest.Nodes.Geo geo = 2;
inline bool EarthRequest_Nodes::_internal_has_geo() const {
  return this != internal_default_instance() && geo_ != nullptr;
}
inline bool EarthRequest_Nodes::has_geo() const {
  return _internal_has_geo();
}
inline void EarthRequest_Nodes::clear_geo() {
  if (GetArenaForAllocation() == nullptr && geo_ != nullptr) {
    delete geo_;
  }
  geo_ = nullptr;
}
inline const ::EarthSimulation::EarthRequest_Nodes_Geo& EarthRequest_Nodes::_internal_geo() const {
  const ::EarthSimulation::EarthRequest_Nodes_Geo* p = geo_;
  return p != nullptr ? *p : reinterpret_cast<const ::EarthSimulation::EarthRequest_Nodes_Geo&>(
      ::EarthSimulation::_EarthRequest_Nodes_Geo_default_instance_);
}
inline const ::EarthSimulation::EarthRequest_Nodes_Geo& EarthRequest_Nodes::geo() const {
  // @@protoc_insertion_point(field_get:EarthSimulation.EarthRequest.Nodes.geo)
  return _internal_geo();
}
inline void EarthRequest_Nodes::unsafe_arena_set_allocated_geo(
    ::EarthSimulation::EarthRequest_Nodes_Geo* geo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geo_);
  }
  geo_ = geo;
  if (geo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EarthSimulation.EarthRequest.Nodes.geo)
}
inline ::EarthSimulation::EarthRequest_Nodes_Geo* EarthRequest_Nodes::release_geo() {
  
  ::EarthSimulation::EarthRequest_Nodes_Geo* temp = geo_;
  geo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::EarthSimulation::EarthRequest_Nodes_Geo* EarthRequest_Nodes::unsafe_arena_release_geo() {
  // @@protoc_insertion_point(field_release:EarthSimulation.EarthRequest.Nodes.geo)
  
  ::EarthSimulation::EarthRequest_Nodes_Geo* temp = geo_;
  geo_ = nullptr;
  return temp;
}
inline ::EarthSimulation::EarthRequest_Nodes_Geo* EarthRequest_Nodes::_internal_mutable_geo() {
  
  if (geo_ == nullptr) {
    auto* p = CreateMaybeMessage<::EarthSimulation::EarthRequest_Nodes_Geo>(GetArenaForAllocation());
    geo_ = p;
  }
  return geo_;
}
inline ::EarthSimulation::EarthRequest_Nodes_Geo* EarthRequest_Nodes::mutable_geo() {
  ::EarthSimulation::EarthRequest_Nodes_Geo* _msg = _internal_mutable_geo();
  // @@protoc_insertion_point(field_mutable:EarthSimulation.EarthRequest.Nodes.geo)
  return _msg;
}
inline void EarthRequest_Nodes::set_allocated_geo(::EarthSimulation::EarthRequest_Nodes_Geo* geo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete geo_;
  }
  if (geo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::EarthSimulation::EarthRequest_Nodes_Geo>::GetOwningArena(geo);
    if (message_arena != submessage_arena) {
      geo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo, submessage_arena);
    }
    
  } else {
    
  }
  geo_ = geo;
  // @@protoc_insertion_point(field_set_allocated:EarthSimulation.EarthRequest.Nodes.geo)
}

// -------------------------------------------------------------------

// EarthRequest

// repeated .EarthSimulation.EarthRequest.Nodes nodes = 1;
inline int EarthRequest::_internal_nodes_size() const {
  return nodes_.size();
}
inline int EarthRequest::nodes_size() const {
  return _internal_nodes_size();
}
inline void EarthRequest::clear_nodes() {
  nodes_.Clear();
}
inline ::EarthSimulation::EarthRequest_Nodes* EarthRequest::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:EarthSimulation.EarthRequest.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EarthSimulation::EarthRequest_Nodes >*
EarthRequest::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:EarthSimulation.EarthRequest.nodes)
  return &nodes_;
}
inline const ::EarthSimulation::EarthRequest_Nodes& EarthRequest::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::EarthSimulation::EarthRequest_Nodes& EarthRequest::nodes(int index) const {
  // @@protoc_insertion_point(field_get:EarthSimulation.EarthRequest.nodes)
  return _internal_nodes(index);
}
inline ::EarthSimulation::EarthRequest_Nodes* EarthRequest::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::EarthSimulation::EarthRequest_Nodes* EarthRequest::add_nodes() {
  ::EarthSimulation::EarthRequest_Nodes* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:EarthSimulation.EarthRequest.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EarthSimulation::EarthRequest_Nodes >&
EarthRequest::nodes() const {
  // @@protoc_insertion_point(field_list:EarthSimulation.EarthRequest.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// EarthResponse_Frame_Geo

// double lat_deg = 1;
inline void EarthResponse_Frame_Geo::clear_lat_deg() {
  lat_deg_ = 0;
}
inline double EarthResponse_Frame_Geo::_internal_lat_deg() const {
  return lat_deg_;
}
inline double EarthResponse_Frame_Geo::lat_deg() const {
  // @@protoc_insertion_point(field_get:EarthSimulation.EarthResponse.Frame.Geo.lat_deg)
  return _internal_lat_deg();
}
inline void EarthResponse_Frame_Geo::_internal_set_lat_deg(double value) {
  
  lat_deg_ = value;
}
inline void EarthResponse_Frame_Geo::set_lat_deg(double value) {
  _internal_set_lat_deg(value);
  // @@protoc_insertion_point(field_set:EarthSimulation.EarthResponse.Frame.Geo.lat_deg)
}

// double lon_deg = 2;
inline void EarthResponse_Frame_Geo::clear_lon_deg() {
  lon_deg_ = 0;
}
inline double EarthResponse_Frame_Geo::_internal_lon_deg() const {
  return lon_deg_;
}
inline double EarthResponse_Frame_Geo::lon_deg() const {
  // @@protoc_insertion_point(field_get:EarthSimulation.EarthResponse.Frame.Geo.lon_deg)
  return _internal_lon_deg();
}
inline void EarthResponse_Frame_Geo::_internal_set_lon_deg(double value) {
  
  lon_deg_ = value;
}
inline void EarthResponse_Frame_Geo::set_lon_deg(double value) {
  _internal_set_lon_deg(value);
  // @@protoc_insertion_point(field_set:EarthSimulation.EarthResponse.Frame.Geo.lon_deg)
}

// double alt_km = 3;
inline void EarthResponse_Frame_Geo::clear_alt_km() {
  alt_km_ = 0;
}
inline double EarthResponse_Frame_Geo::_internal_alt_km() const {
  return alt_km_;
}
inline double EarthResponse_Frame_Geo::alt_km() const {
  // @@protoc_insertion_point(field_get:EarthSimulation.EarthResponse.Frame.Geo.alt_km)
  return _internal_alt_km();
}
inline void EarthResponse_Frame_Geo::_internal_set_alt_km(double value) {
  
  alt_km_ = value;
}
inline void EarthResponse_Frame_Geo::set_alt_km(double value) {
  _internal_set_alt_km(value);
  // @@protoc_insertion_point(field_set:EarthSimulation.EarthResponse.Frame.Geo.alt_km)
}

// -------------------------------------------------------------------

// EarthResponse_Frame_Mag

// double x_nT = 1;
inline void EarthResponse_Frame_Mag::clear_x_nt() {
  x_nt_ = 0;
}
inline double EarthResponse_Frame_Mag::_internal_x_nt() const {
  return x_nt_;
}
inline double EarthResponse_Frame_Mag::x_nt() const {
  // @@protoc_insertion_point(field_get:EarthSimulation.EarthResponse.Frame.Mag.x_nT)
  return _internal_x_nt();
}
inline void EarthResponse_Frame_Mag::_internal_set_x_nt(double value) {
  
  x_nt_ = value;
}
inline void EarthResponse_Frame_Mag::set_x_nt(double value) {
  _internal_set_x_nt(value);
  // @@protoc_insertion_point(field_set:EarthSimulation.EarthResponse.Frame.Mag.x_nT)
}

// double y_nT = 2;
inline void EarthResponse_Frame_Mag::clear_y_nt() {
  y_nt_ = 0;
}
inline double EarthResponse_Frame_Mag::_internal_y_nt() const {
  return y_nt_;
}
inline double EarthResponse_Frame_Mag::y_nt() const {
  // @@protoc_insertion_point(field_get:EarthSimulation.EarthResponse.Frame.Mag.y_nT)
  return _internal_y_nt();
}
inline void EarthResponse_Frame_Mag::_internal_set_y_nt(double value) {
  
  y_nt_ = value;
}
inline void EarthResponse_Frame_Mag::set_y_nt(double value) {
  _internal_set_y_nt(value);
  // @@protoc_insertion_point(field_set:EarthSimulation.EarthResponse.Frame.Mag.y_nT)
}

// double z_nT = 3;
inline void EarthResponse_Frame_Mag::clear_z_nt() {
  z_nt_ = 0;
}
inline double EarthResponse_Frame_Mag::_internal_z_nt() const {
  return z_nt_;
}
inline double EarthResponse_Frame_Mag::z_nt() const {
  // @@protoc_insertion_point(field_get:EarthSimulation.EarthResponse.Frame.Mag.z_nT)
  return _internal_z_nt();
}
inline void EarthResponse_Frame_Mag::_internal_set_z_nt(double value) {
  
  z_nt_ = value;
}
inline void EarthResponse_Frame_Mag::set_z_nt(double value) {
  _internal_set_z_nt(value);
  // @@protoc_insertion_point(field_set:EarthSimulation.EarthResponse.Frame.Mag.z_nT)
}

// double f_nT = 4;
inline void EarthResponse_Frame_Mag::clear_f_nt() {
  f_nt_ = 0;
}
inline double EarthResponse_Frame_Mag::_internal_f_nt() const {
  return f_nt_;
}
inline double EarthResponse_Frame_Mag::f_nt() const {
  // @@protoc_insertion_point(field_get:EarthSimulation.EarthResponse.Frame.Mag.f_nT)
  return _internal_f_nt();
}
inline void EarthResponse_Frame_Mag::_internal_set_f_nt(double value) {
  
  f_nt_ = value;
}
inline void EarthResponse_Frame_Mag::set_f_nt(double value) {
  _internal_set_f_nt(value);
  // @@protoc_insertion_point(field_set:EarthSimulation.EarthResponse.Frame.Mag.f_nT)
}

// -------------------------------------------------------------------

// EarthResponse_Frame

// double t_rel_s = 1;
inline void EarthResponse_Frame::clear_t_rel_s() {
  t_rel_s_ = 0;
}
inline double EarthResponse_Frame::_internal_t_rel_s() const {
  return t_rel_s_;
}
inline double EarthResponse_Frame::t_rel_s() const {
  // @@protoc_insertion_point(field_get:EarthSimulation.EarthResponse.Frame.t_rel_s)
  return _internal_t_rel_s();
}
inline void EarthResponse_Frame::_internal_set_t_rel_s(double value) {
  
  t_rel_s_ = value;
}
inline void EarthResponse_Frame::set_t_rel_s(double value) {
  _internal_set_t_rel_s(value);
  // @@protoc_insertion_point(field_set:EarthSimulation.EarthResponse.Frame.t_rel_s)
}

// .EarthSimulation.EarthResponse.Frame.Geo geo = 2;
inline bool EarthResponse_Frame::_internal_has_geo() const {
  return this != internal_default_instance() && geo_ != nullptr;
}
inline bool EarthResponse_Frame::has_geo() const {
  return _internal_has_geo();
}
inline void EarthResponse_Frame::clear_geo() {
  if (GetArenaForAllocation() == nullptr && geo_ != nullptr) {
    delete geo_;
  }
  geo_ = nullptr;
}
inline const ::EarthSimulation::EarthResponse_Frame_Geo& EarthResponse_Frame::_internal_geo() const {
  const ::EarthSimulation::EarthResponse_Frame_Geo* p = geo_;
  return p != nullptr ? *p : reinterpret_cast<const ::EarthSimulation::EarthResponse_Frame_Geo&>(
      ::EarthSimulation::_EarthResponse_Frame_Geo_default_instance_);
}
inline const ::EarthSimulation::EarthResponse_Frame_Geo& EarthResponse_Frame::geo() const {
  // @@protoc_insertion_point(field_get:EarthSimulation.EarthResponse.Frame.geo)
  return _internal_geo();
}
inline void EarthResponse_Frame::unsafe_arena_set_allocated_geo(
    ::EarthSimulation::EarthResponse_Frame_Geo* geo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geo_);
  }
  geo_ = geo;
  if (geo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EarthSimulation.EarthResponse.Frame.geo)
}
inline ::EarthSimulation::EarthResponse_Frame_Geo* EarthResponse_Frame::release_geo() {
  
  ::EarthSimulation::EarthResponse_Frame_Geo* temp = geo_;
  geo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::EarthSimulation::EarthResponse_Frame_Geo* EarthResponse_Frame::unsafe_arena_release_geo() {
  // @@protoc_insertion_point(field_release:EarthSimulation.EarthResponse.Frame.geo)
  
  ::EarthSimulation::EarthResponse_Frame_Geo* temp = geo_;
  geo_ = nullptr;
  return temp;
}
inline ::EarthSimulation::EarthResponse_Frame_Geo* EarthResponse_Frame::_internal_mutable_geo() {
  
  if (geo_ == nullptr) {
    auto* p = CreateMaybeMessage<::EarthSimulation::EarthResponse_Frame_Geo>(GetArenaForAllocation());
    geo_ = p;
  }
  return geo_;
}
inline ::EarthSimulation::EarthResponse_Frame_Geo* EarthResponse_Frame::mutable_geo() {
  ::EarthSimulation::EarthResponse_Frame_Geo* _msg = _internal_mutable_geo();
  // @@protoc_insertion_point(field_mutable:EarthSimulation.EarthResponse.Frame.geo)
  return _msg;
}
inline void EarthResponse_Frame::set_allocated_geo(::EarthSimulation::EarthResponse_Frame_Geo* geo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete geo_;
  }
  if (geo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::EarthSimulation::EarthResponse_Frame_Geo>::GetOwningArena(geo);
    if (message_arena != submessage_arena) {
      geo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo, submessage_arena);
    }
    
  } else {
    
  }
  geo_ = geo;
  // @@protoc_insertion_point(field_set_allocated:EarthSimulation.EarthResponse.Frame.geo)
}

// .EarthSimulation.EarthResponse.Frame.Mag mag = 3;
inline bool EarthResponse_Frame::_internal_has_mag() const {
  return this != internal_default_instance() && mag_ != nullptr;
}
inline bool EarthResponse_Frame::has_mag() const {
  return _internal_has_mag();
}
inline void EarthResponse_Frame::clear_mag() {
  if (GetArenaForAllocation() == nullptr && mag_ != nullptr) {
    delete mag_;
  }
  mag_ = nullptr;
}
inline const ::EarthSimulation::EarthResponse_Frame_Mag& EarthResponse_Frame::_internal_mag() const {
  const ::EarthSimulation::EarthResponse_Frame_Mag* p = mag_;
  return p != nullptr ? *p : reinterpret_cast<const ::EarthSimulation::EarthResponse_Frame_Mag&>(
      ::EarthSimulation::_EarthResponse_Frame_Mag_default_instance_);
}
inline const ::EarthSimulation::EarthResponse_Frame_Mag& EarthResponse_Frame::mag() const {
  // @@protoc_insertion_point(field_get:EarthSimulation.EarthResponse.Frame.mag)
  return _internal_mag();
}
inline void EarthResponse_Frame::unsafe_arena_set_allocated_mag(
    ::EarthSimulation::EarthResponse_Frame_Mag* mag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mag_);
  }
  mag_ = mag;
  if (mag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EarthSimulation.EarthResponse.Frame.mag)
}
inline ::EarthSimulation::EarthResponse_Frame_Mag* EarthResponse_Frame::release_mag() {
  
  ::EarthSimulation::EarthResponse_Frame_Mag* temp = mag_;
  mag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::EarthSimulation::EarthResponse_Frame_Mag* EarthResponse_Frame::unsafe_arena_release_mag() {
  // @@protoc_insertion_point(field_release:EarthSimulation.EarthResponse.Frame.mag)
  
  ::EarthSimulation::EarthResponse_Frame_Mag* temp = mag_;
  mag_ = nullptr;
  return temp;
}
inline ::EarthSimulation::EarthResponse_Frame_Mag* EarthResponse_Frame::_internal_mutable_mag() {
  
  if (mag_ == nullptr) {
    auto* p = CreateMaybeMessage<::EarthSimulation::EarthResponse_Frame_Mag>(GetArenaForAllocation());
    mag_ = p;
  }
  return mag_;
}
inline ::EarthSimulation::EarthResponse_Frame_Mag* EarthResponse_Frame::mutable_mag() {
  ::EarthSimulation::EarthResponse_Frame_Mag* _msg = _internal_mutable_mag();
  // @@protoc_insertion_point(field_mutable:EarthSimulation.EarthResponse.Frame.mag)
  return _msg;
}
inline void EarthResponse_Frame::set_allocated_mag(::EarthSimulation::EarthResponse_Frame_Mag* mag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mag_;
  }
  if (mag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::EarthSimulation::EarthResponse_Frame_Mag>::GetOwningArena(mag);
    if (message_arena != submessage_arena) {
      mag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mag, submessage_arena);
    }
    
  } else {
    
  }
  mag_ = mag;
  // @@protoc_insertion_point(field_set_allocated:EarthSimulation.EarthResponse.Frame.mag)
}

// -------------------------------------------------------------------

// EarthResponse

// repeated .EarthSimulation.EarthResponse.Frame frames = 1;
inline int EarthResponse::_internal_frames_size() const {
  return frames_.size();
}
inline int EarthResponse::frames_size() const {
  return _internal_frames_size();
}
inline void EarthResponse::clear_frames() {
  frames_.Clear();
}
inline ::EarthSimulation::EarthResponse_Frame* EarthResponse::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:EarthSimulation.EarthResponse.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EarthSimulation::EarthResponse_Frame >*
EarthResponse::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:EarthSimulation.EarthResponse.frames)
  return &frames_;
}
inline const ::EarthSimulation::EarthResponse_Frame& EarthResponse::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::EarthSimulation::EarthResponse_Frame& EarthResponse::frames(int index) const {
  // @@protoc_insertion_point(field_get:EarthSimulation.EarthResponse.frames)
  return _internal_frames(index);
}
inline ::EarthSimulation::EarthResponse_Frame* EarthResponse::_internal_add_frames() {
  return frames_.Add();
}
inline ::EarthSimulation::EarthResponse_Frame* EarthResponse::add_frames() {
  ::EarthSimulation::EarthResponse_Frame* _add = _internal_add_frames();
  // @@protoc_insertion_point(field_add:EarthSimulation.EarthResponse.frames)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EarthSimulation::EarthResponse_Frame >&
EarthResponse::frames() const {
  // @@protoc_insertion_point(field_list:EarthSimulation.EarthResponse.frames)
  return frames_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace EarthSimulation

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Earth_5fsimulation_2eproto
